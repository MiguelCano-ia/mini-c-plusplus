Grammar:

Rule 0     S' -> program
Rule 1     program -> decl_list
Rule 2     decl_list -> decl
Rule 3     decl_list -> decl_list decl
Rule 4     decl -> var_decl_instance
Rule 5     decl -> class_decl
Rule 6     decl -> func_decl
Rule 7     decl -> var_decl
Rule 8     class_decl -> CLASS IDENT { class_body } ;
Rule 9     class_body -> <empty>
Rule 10    class_body -> class_member class_body
Rule 11    class_body -> access_specifier class_body
Rule 12    access_specifier -> PUBLIC :
Rule 13    access_specifier -> PRIVATE :
Rule 14    class_member -> constructor_decl
Rule 15    class_member -> method_decl
Rule 16    class_member -> var_decl
Rule 17    method_decl -> type_spec IDENT ( param_list ) compound_stmt
Rule 18    constructor_decl -> IDENT ( param_list ) compound_stmt
Rule 19    func_decl -> type_spec IDENT ( param_list ) compound_stmt
Rule 20    param_list -> param
Rule 21    param_list -> param_list , param
Rule 22    param_list -> empty
Rule 23    param -> type_spec IDENT [ INTLIT ]
Rule 24    param -> type_spec IDENT
Rule 25    compound_stmt -> { local_decls stmt_list }
Rule 26    local_decls -> empty
Rule 27    local_decls -> var_decl local_decls
Rule 28    stmt_list -> stmt stmt_list
Rule 29    stmt_list -> empty
Rule 30    stmt -> var_decl_instance
Rule 31    stmt -> super_stmt
Rule 32    stmt -> public_stmt
Rule 33    stmt -> private_stmt
Rule 34    stmt -> this_stmt
Rule 35    stmt -> new_stmt
Rule 36    stmt -> print_stmt
Rule 37    stmt -> continue_stmt
Rule 38    stmt -> break_stmt
Rule 39    stmt -> while_stmt
Rule 40    stmt -> return_stmt
Rule 41    stmt -> if_stmt
Rule 42    stmt -> compound_stmt
Rule 43    stmt -> expr_stmt
Rule 44    super_stmt -> SUPER ( args_list ) ;
Rule 45    expr_stmt -> expr ;
Rule 46    if_stmt -> IF ( expr ) stmt ELSE stmt  [precedence=left, level=12]
Rule 47    if_stmt -> IF ( expr ) stmt  [precedence=right, level=11]
Rule 48    private_stmt -> PRIVATE : stmt
Rule 49    public_stmt -> PUBLIC : stmt
Rule 50    return_stmt -> RETURN expr ;
Rule 51    return_stmt -> RETURN ;
Rule 52    while_stmt -> WHILE ( expr ) stmt
Rule 53    break_stmt -> BREAK ;
Rule 54    continue_stmt -> CONTINUE ;
Rule 55    new_stmt -> IDENT = NEW IDENT ( args_list ) ;
Rule 56    args_list -> args_list , expr
Rule 57    args_list -> expr
Rule 58    args_list -> empty
Rule 59    print_stmt -> PRINTF ( expr ) ;
Rule 60    this_stmt -> THIS ;
Rule 61    var_decl -> type_spec IDENT [ INTLIT ] ;
Rule 62    var_decl -> type_spec IDENT = expr ;
Rule 63    var_decl -> type_spec IDENT ;
Rule 64    var_decl_instance -> IDENT IDENT ;
Rule 65    type_spec -> STRING
Rule 66    type_spec -> BOOL
Rule 67    type_spec -> FLOAT
Rule 68    type_spec -> INT
Rule 69    type_spec -> VOID
Rule 70    expr -> IDENT . SIZE
Rule 71    expr -> ( expr )
Rule 72    expr -> NOT expr  [precedence=right, level=10]
Rule 73    expr -> DECREMENT expr  [precedence=right, level=10]
Rule 74    expr -> INCREMENT expr  [precedence=right, level=10]
Rule 75    expr -> + expr  [precedence=right, level=10]
Rule 76    expr -> ! expr  [precedence=right, level=10]
Rule 77    expr -> - expr  [precedence=right, level=10]
Rule 78    expr -> expr % expr  [precedence=left, level=8]
Rule 79    expr -> expr / expr  [precedence=left, level=8]
Rule 80    expr -> expr * expr  [precedence=left, level=8]
Rule 81    expr -> expr - expr  [precedence=left, level=7]
Rule 82    expr -> expr + expr  [precedence=left, level=7]
Rule 83    expr -> expr GE expr  [precedence=nonassoc, level=6]
Rule 84    expr -> expr GT expr  [precedence=nonassoc, level=6]
Rule 85    expr -> expr LE expr  [precedence=nonassoc, level=6]
Rule 86    expr -> expr LT expr  [precedence=nonassoc, level=6]
Rule 87    expr -> expr NE expr  [precedence=nonassoc, level=5]
Rule 88    expr -> expr EQ expr  [precedence=nonassoc, level=5]
Rule 89    expr -> expr AND expr  [precedence=left, level=4]
Rule 90    expr -> expr OR expr  [precedence=left, level=3]
Rule 91    expr -> IDENT . IDENT ( args_list )
Rule 92    expr -> IDENT
Rule 93    expr -> IDENT ( args_list )
Rule 94    expr -> IDENT [ expr ]
Rule 95    expr -> IDENT [ expr ] = expr  [precedence=left, level=2]
Rule 96    expr -> IDENT = expr  [precedence=left, level=2]
Rule 97    expr -> FALSE
Rule 98    expr -> TRUE
Rule 99    expr -> STRINGLIT
Rule 100   expr -> BOOLIT
Rule 101   expr -> FLOATLIT
Rule 102   expr -> INTLIT
Rule 103   empty -> <empty>

Terminals, with rules where they appear:

!                    : 76
%                    : 78
(                    : 17 18 19 44 46 47 52 55 59 71 91 93
)                    : 17 18 19 44 46 47 52 55 59 71 91 93
*                    : 80
+                    : 75 82
,                    : 21 56
-                    : 77 81
.                    : 70 91
/                    : 79
:                    : 12 13 48 49
;                    : 8 44 45 50 51 53 54 55 59 60 61 62 63 64
=                    : 55 62 95 96
AND                  : 89
BOOL                 : 66
BOOLIT               : 100
BREAK                : 53
CLASS                : 8
CONTINUE             : 54
DECREMENT            : 73
ELSE                 : 46
EQ                   : 88
FALSE                : 97
FLOAT                : 67
FLOATLIT             : 101
GE                   : 83
GT                   : 84
IDENT                : 8 17 18 19 23 24 55 55 61 62 63 64 64 70 91 91 92 93 94 95 96
IF                   : 46 47
INCREMENT            : 74
INT                  : 68
INTLIT               : 23 61 102
LE                   : 85
LT                   : 86
NE                   : 87
NEW                  : 55
NOT                  : 72
OR                   : 90
PRINTF               : 59
PRIVATE              : 13 48
PUBLIC               : 12 49
RETURN               : 50 51
SIZE                 : 70
STRING               : 65
STRINGLIT            : 99
SUPER                : 44
THIS                 : 60
TRUE                 : 98
VOID                 : 69
WHILE                : 52
[                    : 23 61 94 95
]                    : 23 61 94 95
error                : 
{                    : 8 25
}                    : 8 25

Nonterminals, with rules where they appear:

access_specifier     : 11
args_list            : 44 55 56 91 93
break_stmt           : 38
class_body           : 8 10 11
class_decl           : 5
class_member         : 10
compound_stmt        : 17 18 19 42
constructor_decl     : 14
continue_stmt        : 37
decl                 : 2 3
decl_list            : 1 3
empty                : 22 26 29 58
expr                 : 45 46 47 50 52 56 57 59 62 71 72 73 74 75 76 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 94 95 95 96
expr_stmt            : 43
func_decl            : 6
if_stmt              : 41
local_decls          : 25 27
method_decl          : 15
new_stmt             : 35
param                : 20 21
param_list           : 17 18 19 21
print_stmt           : 36
private_stmt         : 33
program              : 0
public_stmt          : 32
return_stmt          : 40
stmt                 : 28 46 46 47 48 49 52
stmt_list            : 25 28
super_stmt           : 31
this_stmt            : 34
type_spec            : 17 19 23 24 61 62 63
var_decl             : 7 16 27
var_decl_instance    : 4 30
while_stmt           : 39


state 0

    (0) S' -> . program
    (1) program -> . decl_list
    (2) decl_list -> . decl
    (3) decl_list -> . decl_list decl
    (4) decl -> . var_decl_instance
    (5) decl -> . class_decl
    (6) decl -> . func_decl
    (7) decl -> . var_decl
    (64) var_decl_instance -> . IDENT IDENT ;
    (8) class_decl -> . CLASS IDENT { class_body } ;
    (19) func_decl -> . type_spec IDENT ( param_list ) compound_stmt
    (61) var_decl -> . type_spec IDENT [ INTLIT ] ;
    (62) var_decl -> . type_spec IDENT = expr ;
    (63) var_decl -> . type_spec IDENT ;
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    IDENT           shift and go to state 8
    CLASS           shift and go to state 9
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    program                        shift and go to state 1
    decl_list                      shift and go to state 2
    decl                           shift and go to state 3
    var_decl_instance              shift and go to state 4
    class_decl                     shift and go to state 5
    func_decl                      shift and go to state 6
    var_decl                       shift and go to state 7
    type_spec                      shift and go to state 10

state 1

    (0) S' -> program .


state 2

    (1) program -> decl_list .
    (3) decl_list -> decl_list . decl
    (4) decl -> . var_decl_instance
    (5) decl -> . class_decl
    (6) decl -> . func_decl
    (7) decl -> . var_decl
    (64) var_decl_instance -> . IDENT IDENT ;
    (8) class_decl -> . CLASS IDENT { class_body } ;
    (19) func_decl -> . type_spec IDENT ( param_list ) compound_stmt
    (61) var_decl -> . type_spec IDENT [ INTLIT ] ;
    (62) var_decl -> . type_spec IDENT = expr ;
    (63) var_decl -> . type_spec IDENT ;
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    $end            reduce using rule 1 (program -> decl_list .)
    IDENT           shift and go to state 8
    CLASS           shift and go to state 9
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    decl                           shift and go to state 16
    var_decl_instance              shift and go to state 4
    class_decl                     shift and go to state 5
    func_decl                      shift and go to state 6
    var_decl                       shift and go to state 7
    type_spec                      shift and go to state 10

state 3

    (2) decl_list -> decl .
    IDENT           reduce using rule 2 (decl_list -> decl .)
    CLASS           reduce using rule 2 (decl_list -> decl .)
    STRING          reduce using rule 2 (decl_list -> decl .)
    BOOL            reduce using rule 2 (decl_list -> decl .)
    FLOAT           reduce using rule 2 (decl_list -> decl .)
    INT             reduce using rule 2 (decl_list -> decl .)
    VOID            reduce using rule 2 (decl_list -> decl .)
    $end            reduce using rule 2 (decl_list -> decl .)


state 4

    (4) decl -> var_decl_instance .
    IDENT           reduce using rule 4 (decl -> var_decl_instance .)
    CLASS           reduce using rule 4 (decl -> var_decl_instance .)
    STRING          reduce using rule 4 (decl -> var_decl_instance .)
    BOOL            reduce using rule 4 (decl -> var_decl_instance .)
    FLOAT           reduce using rule 4 (decl -> var_decl_instance .)
    INT             reduce using rule 4 (decl -> var_decl_instance .)
    VOID            reduce using rule 4 (decl -> var_decl_instance .)
    $end            reduce using rule 4 (decl -> var_decl_instance .)


state 5

    (5) decl -> class_decl .
    IDENT           reduce using rule 5 (decl -> class_decl .)
    CLASS           reduce using rule 5 (decl -> class_decl .)
    STRING          reduce using rule 5 (decl -> class_decl .)
    BOOL            reduce using rule 5 (decl -> class_decl .)
    FLOAT           reduce using rule 5 (decl -> class_decl .)
    INT             reduce using rule 5 (decl -> class_decl .)
    VOID            reduce using rule 5 (decl -> class_decl .)
    $end            reduce using rule 5 (decl -> class_decl .)


state 6

    (6) decl -> func_decl .
    IDENT           reduce using rule 6 (decl -> func_decl .)
    CLASS           reduce using rule 6 (decl -> func_decl .)
    STRING          reduce using rule 6 (decl -> func_decl .)
    BOOL            reduce using rule 6 (decl -> func_decl .)
    FLOAT           reduce using rule 6 (decl -> func_decl .)
    INT             reduce using rule 6 (decl -> func_decl .)
    VOID            reduce using rule 6 (decl -> func_decl .)
    $end            reduce using rule 6 (decl -> func_decl .)


state 7

    (7) decl -> var_decl .
    IDENT           reduce using rule 7 (decl -> var_decl .)
    CLASS           reduce using rule 7 (decl -> var_decl .)
    STRING          reduce using rule 7 (decl -> var_decl .)
    BOOL            reduce using rule 7 (decl -> var_decl .)
    FLOAT           reduce using rule 7 (decl -> var_decl .)
    INT             reduce using rule 7 (decl -> var_decl .)
    VOID            reduce using rule 7 (decl -> var_decl .)
    $end            reduce using rule 7 (decl -> var_decl .)


state 8

    (64) var_decl_instance -> IDENT . IDENT ;
    IDENT           shift and go to state 17


state 9

    (8) class_decl -> CLASS . IDENT { class_body } ;
    IDENT           shift and go to state 18


state 10

    (19) func_decl -> type_spec . IDENT ( param_list ) compound_stmt
    (61) var_decl -> type_spec . IDENT [ INTLIT ] ;
    (62) var_decl -> type_spec . IDENT = expr ;
    (63) var_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 19


state 11

    (65) type_spec -> STRING .
    IDENT           reduce using rule 65 (type_spec -> STRING .)


state 12

    (66) type_spec -> BOOL .
    IDENT           reduce using rule 66 (type_spec -> BOOL .)


state 13

    (67) type_spec -> FLOAT .
    IDENT           reduce using rule 67 (type_spec -> FLOAT .)


state 14

    (68) type_spec -> INT .
    IDENT           reduce using rule 68 (type_spec -> INT .)


state 15

    (69) type_spec -> VOID .
    IDENT           reduce using rule 69 (type_spec -> VOID .)


state 16

    (3) decl_list -> decl_list decl .
    IDENT           reduce using rule 3 (decl_list -> decl_list decl .)
    CLASS           reduce using rule 3 (decl_list -> decl_list decl .)
    STRING          reduce using rule 3 (decl_list -> decl_list decl .)
    BOOL            reduce using rule 3 (decl_list -> decl_list decl .)
    FLOAT           reduce using rule 3 (decl_list -> decl_list decl .)
    INT             reduce using rule 3 (decl_list -> decl_list decl .)
    VOID            reduce using rule 3 (decl_list -> decl_list decl .)
    $end            reduce using rule 3 (decl_list -> decl_list decl .)


state 17

    (64) var_decl_instance -> IDENT IDENT . ;
    ;               shift and go to state 20


state 18

    (8) class_decl -> CLASS IDENT . { class_body } ;
    {               shift and go to state 21


state 19

    (19) func_decl -> type_spec IDENT . ( param_list ) compound_stmt
    (61) var_decl -> type_spec IDENT . [ INTLIT ] ;
    (62) var_decl -> type_spec IDENT . = expr ;
    (63) var_decl -> type_spec IDENT . ;
    (               shift and go to state 22
    [               shift and go to state 23
    =               shift and go to state 25
    ;               shift and go to state 24


state 20

    (64) var_decl_instance -> IDENT IDENT ; .
    IDENT           reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    CLASS           reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    STRING          reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    BOOL            reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    FLOAT           reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    INT             reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    VOID            reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    $end            reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    SUPER           reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    PUBLIC          reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    PRIVATE         reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    THIS            reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    PRINTF          reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    CONTINUE        reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    BREAK           reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    WHILE           reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    RETURN          reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    IF              reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    {               reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    (               reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    NOT             reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    DECREMENT       reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    INCREMENT       reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    +               reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    !               reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    -               reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    FALSE           reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    TRUE            reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    STRINGLIT       reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    BOOLIT          reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    FLOATLIT        reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    INTLIT          reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    }               reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)
    ELSE            reduce using rule 64 (var_decl_instance -> IDENT IDENT ; .)


state 21

    (8) class_decl -> CLASS IDENT { . class_body } ;
    (9) class_body -> .
    (10) class_body -> . class_member class_body
    (11) class_body -> . access_specifier class_body
    (14) class_member -> . constructor_decl
    (15) class_member -> . method_decl
    (16) class_member -> . var_decl
    (12) access_specifier -> . PUBLIC :
    (13) access_specifier -> . PRIVATE :
    (18) constructor_decl -> . IDENT ( param_list ) compound_stmt
    (17) method_decl -> . type_spec IDENT ( param_list ) compound_stmt
    (61) var_decl -> . type_spec IDENT [ INTLIT ] ;
    (62) var_decl -> . type_spec IDENT = expr ;
    (63) var_decl -> . type_spec IDENT ;
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    }               reduce using rule 9 (class_body -> .)
    PUBLIC          shift and go to state 33
    PRIVATE         shift and go to state 34
    IDENT           shift and go to state 26
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    class_body                     shift and go to state 27
    class_member                   shift and go to state 28
    access_specifier               shift and go to state 29
    constructor_decl               shift and go to state 30
    method_decl                    shift and go to state 31
    var_decl                       shift and go to state 32
    type_spec                      shift and go to state 35

state 22

    (19) func_decl -> type_spec IDENT ( . param_list ) compound_stmt
    (20) param_list -> . param
    (21) param_list -> . param_list , param
    (22) param_list -> . empty
    (23) param -> . type_spec IDENT [ INTLIT ]
    (24) param -> . type_spec IDENT
    (103) empty -> .
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    )               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    type_spec                      shift and go to state 36
    param_list                     shift and go to state 37
    param                          shift and go to state 38
    empty                          shift and go to state 39

state 23

    (61) var_decl -> type_spec IDENT [ . INTLIT ] ;
    INTLIT          shift and go to state 40


state 24

    (63) var_decl -> type_spec IDENT ; .
    IDENT           reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    CLASS           reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    STRING          reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    BOOL            reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    FLOAT           reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    INT             reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    VOID            reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    $end            reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    PUBLIC          reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    PRIVATE         reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    }               reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    SUPER           reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    THIS            reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    PRINTF          reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    CONTINUE        reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    BREAK           reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    WHILE           reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    RETURN          reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    IF              reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    {               reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    (               reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    NOT             reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    DECREMENT       reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    INCREMENT       reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    +               reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    !               reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    -               reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    FALSE           reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    TRUE            reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    STRINGLIT       reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    BOOLIT          reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    FLOATLIT        reduce using rule 63 (var_decl -> type_spec IDENT ; .)
    INTLIT          reduce using rule 63 (var_decl -> type_spec IDENT ; .)


state 25

    (62) var_decl -> type_spec IDENT = . expr ;
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 42

state 26

    (18) constructor_decl -> IDENT . ( param_list ) compound_stmt
    (               shift and go to state 56


state 27

    (8) class_decl -> CLASS IDENT { class_body . } ;
    }               shift and go to state 57


state 28

    (10) class_body -> class_member . class_body
    (9) class_body -> .
    (10) class_body -> . class_member class_body
    (11) class_body -> . access_specifier class_body
    (14) class_member -> . constructor_decl
    (15) class_member -> . method_decl
    (16) class_member -> . var_decl
    (12) access_specifier -> . PUBLIC :
    (13) access_specifier -> . PRIVATE :
    (18) constructor_decl -> . IDENT ( param_list ) compound_stmt
    (17) method_decl -> . type_spec IDENT ( param_list ) compound_stmt
    (61) var_decl -> . type_spec IDENT [ INTLIT ] ;
    (62) var_decl -> . type_spec IDENT = expr ;
    (63) var_decl -> . type_spec IDENT ;
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    }               reduce using rule 9 (class_body -> .)
    PUBLIC          shift and go to state 33
    PRIVATE         shift and go to state 34
    IDENT           shift and go to state 26
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    class_member                   shift and go to state 28
    class_body                     shift and go to state 58
    access_specifier               shift and go to state 29
    constructor_decl               shift and go to state 30
    method_decl                    shift and go to state 31
    var_decl                       shift and go to state 32
    type_spec                      shift and go to state 35

state 29

    (11) class_body -> access_specifier . class_body
    (9) class_body -> .
    (10) class_body -> . class_member class_body
    (11) class_body -> . access_specifier class_body
    (14) class_member -> . constructor_decl
    (15) class_member -> . method_decl
    (16) class_member -> . var_decl
    (12) access_specifier -> . PUBLIC :
    (13) access_specifier -> . PRIVATE :
    (18) constructor_decl -> . IDENT ( param_list ) compound_stmt
    (17) method_decl -> . type_spec IDENT ( param_list ) compound_stmt
    (61) var_decl -> . type_spec IDENT [ INTLIT ] ;
    (62) var_decl -> . type_spec IDENT = expr ;
    (63) var_decl -> . type_spec IDENT ;
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    }               reduce using rule 9 (class_body -> .)
    PUBLIC          shift and go to state 33
    PRIVATE         shift and go to state 34
    IDENT           shift and go to state 26
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    access_specifier               shift and go to state 29
    class_body                     shift and go to state 59
    class_member                   shift and go to state 28
    constructor_decl               shift and go to state 30
    method_decl                    shift and go to state 31
    var_decl                       shift and go to state 32
    type_spec                      shift and go to state 35

state 30

    (14) class_member -> constructor_decl .
    PUBLIC          reduce using rule 14 (class_member -> constructor_decl .)
    PRIVATE         reduce using rule 14 (class_member -> constructor_decl .)
    IDENT           reduce using rule 14 (class_member -> constructor_decl .)
    STRING          reduce using rule 14 (class_member -> constructor_decl .)
    BOOL            reduce using rule 14 (class_member -> constructor_decl .)
    FLOAT           reduce using rule 14 (class_member -> constructor_decl .)
    INT             reduce using rule 14 (class_member -> constructor_decl .)
    VOID            reduce using rule 14 (class_member -> constructor_decl .)
    }               reduce using rule 14 (class_member -> constructor_decl .)


state 31

    (15) class_member -> method_decl .
    PUBLIC          reduce using rule 15 (class_member -> method_decl .)
    PRIVATE         reduce using rule 15 (class_member -> method_decl .)
    IDENT           reduce using rule 15 (class_member -> method_decl .)
    STRING          reduce using rule 15 (class_member -> method_decl .)
    BOOL            reduce using rule 15 (class_member -> method_decl .)
    FLOAT           reduce using rule 15 (class_member -> method_decl .)
    INT             reduce using rule 15 (class_member -> method_decl .)
    VOID            reduce using rule 15 (class_member -> method_decl .)
    }               reduce using rule 15 (class_member -> method_decl .)


state 32

    (16) class_member -> var_decl .
    PUBLIC          reduce using rule 16 (class_member -> var_decl .)
    PRIVATE         reduce using rule 16 (class_member -> var_decl .)
    IDENT           reduce using rule 16 (class_member -> var_decl .)
    STRING          reduce using rule 16 (class_member -> var_decl .)
    BOOL            reduce using rule 16 (class_member -> var_decl .)
    FLOAT           reduce using rule 16 (class_member -> var_decl .)
    INT             reduce using rule 16 (class_member -> var_decl .)
    VOID            reduce using rule 16 (class_member -> var_decl .)
    }               reduce using rule 16 (class_member -> var_decl .)


state 33

    (12) access_specifier -> PUBLIC . :
    :               shift and go to state 60


state 34

    (13) access_specifier -> PRIVATE . :
    :               shift and go to state 61


state 35

    (17) method_decl -> type_spec . IDENT ( param_list ) compound_stmt
    (61) var_decl -> type_spec . IDENT [ INTLIT ] ;
    (62) var_decl -> type_spec . IDENT = expr ;
    (63) var_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 62


state 36

    (23) param -> type_spec . IDENT [ INTLIT ]
    (24) param -> type_spec . IDENT
    IDENT           shift and go to state 63


state 37

    (19) func_decl -> type_spec IDENT ( param_list . ) compound_stmt
    (21) param_list -> param_list . , param
    )               shift and go to state 64
    ,               shift and go to state 65


state 38

    (20) param_list -> param .
    )               reduce using rule 20 (param_list -> param .)
    ,               reduce using rule 20 (param_list -> param .)


state 39

    (22) param_list -> empty .
    )               reduce using rule 22 (param_list -> empty .)
    ,               reduce using rule 22 (param_list -> empty .)


state 40

    (61) var_decl -> type_spec IDENT [ INTLIT . ] ;
    ]               shift and go to state 66


state 41

    (70) expr -> IDENT . . SIZE
    (91) expr -> IDENT . . IDENT ( args_list )
    (92) expr -> IDENT .
    (93) expr -> IDENT . ( args_list )
    (94) expr -> IDENT . [ expr ]
    (95) expr -> IDENT . [ expr ] = expr
    (96) expr -> IDENT . = expr
    .               shift and go to state 67
    ;               reduce using rule 92 (expr -> IDENT .)
    %               reduce using rule 92 (expr -> IDENT .)
    /               reduce using rule 92 (expr -> IDENT .)
    *               reduce using rule 92 (expr -> IDENT .)
    -               reduce using rule 92 (expr -> IDENT .)
    +               reduce using rule 92 (expr -> IDENT .)
    GE              reduce using rule 92 (expr -> IDENT .)
    GT              reduce using rule 92 (expr -> IDENT .)
    LE              reduce using rule 92 (expr -> IDENT .)
    LT              reduce using rule 92 (expr -> IDENT .)
    NE              reduce using rule 92 (expr -> IDENT .)
    EQ              reduce using rule 92 (expr -> IDENT .)
    AND             reduce using rule 92 (expr -> IDENT .)
    OR              reduce using rule 92 (expr -> IDENT .)
    )               reduce using rule 92 (expr -> IDENT .)
    ,               reduce using rule 92 (expr -> IDENT .)
    ]               reduce using rule 92 (expr -> IDENT .)
    (               shift and go to state 68
    [               shift and go to state 69
    =               shift and go to state 70


state 42

    (62) var_decl -> type_spec IDENT = expr . ;
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               shift and go to state 71
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 43

    (71) expr -> ( . expr )
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 85

state 44

    (72) expr -> NOT . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 86

state 45

    (73) expr -> DECREMENT . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 87

state 46

    (74) expr -> INCREMENT . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 88

state 47

    (75) expr -> + . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 89

state 48

    (76) expr -> ! . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 90

state 49

    (77) expr -> - . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 91

state 50

    (97) expr -> FALSE .
    ;               reduce using rule 97 (expr -> FALSE .)
    %               reduce using rule 97 (expr -> FALSE .)
    /               reduce using rule 97 (expr -> FALSE .)
    *               reduce using rule 97 (expr -> FALSE .)
    -               reduce using rule 97 (expr -> FALSE .)
    +               reduce using rule 97 (expr -> FALSE .)
    GE              reduce using rule 97 (expr -> FALSE .)
    GT              reduce using rule 97 (expr -> FALSE .)
    LE              reduce using rule 97 (expr -> FALSE .)
    LT              reduce using rule 97 (expr -> FALSE .)
    NE              reduce using rule 97 (expr -> FALSE .)
    EQ              reduce using rule 97 (expr -> FALSE .)
    AND             reduce using rule 97 (expr -> FALSE .)
    OR              reduce using rule 97 (expr -> FALSE .)
    )               reduce using rule 97 (expr -> FALSE .)
    ,               reduce using rule 97 (expr -> FALSE .)
    ]               reduce using rule 97 (expr -> FALSE .)


state 51

    (98) expr -> TRUE .
    ;               reduce using rule 98 (expr -> TRUE .)
    %               reduce using rule 98 (expr -> TRUE .)
    /               reduce using rule 98 (expr -> TRUE .)
    *               reduce using rule 98 (expr -> TRUE .)
    -               reduce using rule 98 (expr -> TRUE .)
    +               reduce using rule 98 (expr -> TRUE .)
    GE              reduce using rule 98 (expr -> TRUE .)
    GT              reduce using rule 98 (expr -> TRUE .)
    LE              reduce using rule 98 (expr -> TRUE .)
    LT              reduce using rule 98 (expr -> TRUE .)
    NE              reduce using rule 98 (expr -> TRUE .)
    EQ              reduce using rule 98 (expr -> TRUE .)
    AND             reduce using rule 98 (expr -> TRUE .)
    OR              reduce using rule 98 (expr -> TRUE .)
    )               reduce using rule 98 (expr -> TRUE .)
    ,               reduce using rule 98 (expr -> TRUE .)
    ]               reduce using rule 98 (expr -> TRUE .)


state 52

    (99) expr -> STRINGLIT .
    ;               reduce using rule 99 (expr -> STRINGLIT .)
    %               reduce using rule 99 (expr -> STRINGLIT .)
    /               reduce using rule 99 (expr -> STRINGLIT .)
    *               reduce using rule 99 (expr -> STRINGLIT .)
    -               reduce using rule 99 (expr -> STRINGLIT .)
    +               reduce using rule 99 (expr -> STRINGLIT .)
    GE              reduce using rule 99 (expr -> STRINGLIT .)
    GT              reduce using rule 99 (expr -> STRINGLIT .)
    LE              reduce using rule 99 (expr -> STRINGLIT .)
    LT              reduce using rule 99 (expr -> STRINGLIT .)
    NE              reduce using rule 99 (expr -> STRINGLIT .)
    EQ              reduce using rule 99 (expr -> STRINGLIT .)
    AND             reduce using rule 99 (expr -> STRINGLIT .)
    OR              reduce using rule 99 (expr -> STRINGLIT .)
    )               reduce using rule 99 (expr -> STRINGLIT .)
    ,               reduce using rule 99 (expr -> STRINGLIT .)
    ]               reduce using rule 99 (expr -> STRINGLIT .)


state 53

    (100) expr -> BOOLIT .
    ;               reduce using rule 100 (expr -> BOOLIT .)
    %               reduce using rule 100 (expr -> BOOLIT .)
    /               reduce using rule 100 (expr -> BOOLIT .)
    *               reduce using rule 100 (expr -> BOOLIT .)
    -               reduce using rule 100 (expr -> BOOLIT .)
    +               reduce using rule 100 (expr -> BOOLIT .)
    GE              reduce using rule 100 (expr -> BOOLIT .)
    GT              reduce using rule 100 (expr -> BOOLIT .)
    LE              reduce using rule 100 (expr -> BOOLIT .)
    LT              reduce using rule 100 (expr -> BOOLIT .)
    NE              reduce using rule 100 (expr -> BOOLIT .)
    EQ              reduce using rule 100 (expr -> BOOLIT .)
    AND             reduce using rule 100 (expr -> BOOLIT .)
    OR              reduce using rule 100 (expr -> BOOLIT .)
    )               reduce using rule 100 (expr -> BOOLIT .)
    ,               reduce using rule 100 (expr -> BOOLIT .)
    ]               reduce using rule 100 (expr -> BOOLIT .)


state 54

    (101) expr -> FLOATLIT .
    ;               reduce using rule 101 (expr -> FLOATLIT .)
    %               reduce using rule 101 (expr -> FLOATLIT .)
    /               reduce using rule 101 (expr -> FLOATLIT .)
    *               reduce using rule 101 (expr -> FLOATLIT .)
    -               reduce using rule 101 (expr -> FLOATLIT .)
    +               reduce using rule 101 (expr -> FLOATLIT .)
    GE              reduce using rule 101 (expr -> FLOATLIT .)
    GT              reduce using rule 101 (expr -> FLOATLIT .)
    LE              reduce using rule 101 (expr -> FLOATLIT .)
    LT              reduce using rule 101 (expr -> FLOATLIT .)
    NE              reduce using rule 101 (expr -> FLOATLIT .)
    EQ              reduce using rule 101 (expr -> FLOATLIT .)
    AND             reduce using rule 101 (expr -> FLOATLIT .)
    OR              reduce using rule 101 (expr -> FLOATLIT .)
    )               reduce using rule 101 (expr -> FLOATLIT .)
    ,               reduce using rule 101 (expr -> FLOATLIT .)
    ]               reduce using rule 101 (expr -> FLOATLIT .)


state 55

    (102) expr -> INTLIT .
    ;               reduce using rule 102 (expr -> INTLIT .)
    %               reduce using rule 102 (expr -> INTLIT .)
    /               reduce using rule 102 (expr -> INTLIT .)
    *               reduce using rule 102 (expr -> INTLIT .)
    -               reduce using rule 102 (expr -> INTLIT .)
    +               reduce using rule 102 (expr -> INTLIT .)
    GE              reduce using rule 102 (expr -> INTLIT .)
    GT              reduce using rule 102 (expr -> INTLIT .)
    LE              reduce using rule 102 (expr -> INTLIT .)
    LT              reduce using rule 102 (expr -> INTLIT .)
    NE              reduce using rule 102 (expr -> INTLIT .)
    EQ              reduce using rule 102 (expr -> INTLIT .)
    AND             reduce using rule 102 (expr -> INTLIT .)
    OR              reduce using rule 102 (expr -> INTLIT .)
    )               reduce using rule 102 (expr -> INTLIT .)
    ,               reduce using rule 102 (expr -> INTLIT .)
    ]               reduce using rule 102 (expr -> INTLIT .)


state 56

    (18) constructor_decl -> IDENT ( . param_list ) compound_stmt
    (20) param_list -> . param
    (21) param_list -> . param_list , param
    (22) param_list -> . empty
    (23) param -> . type_spec IDENT [ INTLIT ]
    (24) param -> . type_spec IDENT
    (103) empty -> .
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    )               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    param_list                     shift and go to state 92
    param                          shift and go to state 38
    empty                          shift and go to state 39
    type_spec                      shift and go to state 36

state 57

    (8) class_decl -> CLASS IDENT { class_body } . ;
    ;               shift and go to state 93


state 58

    (10) class_body -> class_member class_body .
    }               reduce using rule 10 (class_body -> class_member class_body .)


state 59

    (11) class_body -> access_specifier class_body .
    }               reduce using rule 11 (class_body -> access_specifier class_body .)


state 60

    (12) access_specifier -> PUBLIC : .
    PUBLIC          reduce using rule 12 (access_specifier -> PUBLIC : .)
    PRIVATE         reduce using rule 12 (access_specifier -> PUBLIC : .)
    IDENT           reduce using rule 12 (access_specifier -> PUBLIC : .)
    STRING          reduce using rule 12 (access_specifier -> PUBLIC : .)
    BOOL            reduce using rule 12 (access_specifier -> PUBLIC : .)
    FLOAT           reduce using rule 12 (access_specifier -> PUBLIC : .)
    INT             reduce using rule 12 (access_specifier -> PUBLIC : .)
    VOID            reduce using rule 12 (access_specifier -> PUBLIC : .)
    }               reduce using rule 12 (access_specifier -> PUBLIC : .)


state 61

    (13) access_specifier -> PRIVATE : .
    PUBLIC          reduce using rule 13 (access_specifier -> PRIVATE : .)
    PRIVATE         reduce using rule 13 (access_specifier -> PRIVATE : .)
    IDENT           reduce using rule 13 (access_specifier -> PRIVATE : .)
    STRING          reduce using rule 13 (access_specifier -> PRIVATE : .)
    BOOL            reduce using rule 13 (access_specifier -> PRIVATE : .)
    FLOAT           reduce using rule 13 (access_specifier -> PRIVATE : .)
    INT             reduce using rule 13 (access_specifier -> PRIVATE : .)
    VOID            reduce using rule 13 (access_specifier -> PRIVATE : .)
    }               reduce using rule 13 (access_specifier -> PRIVATE : .)


state 62

    (17) method_decl -> type_spec IDENT . ( param_list ) compound_stmt
    (61) var_decl -> type_spec IDENT . [ INTLIT ] ;
    (62) var_decl -> type_spec IDENT . = expr ;
    (63) var_decl -> type_spec IDENT . ;
    (               shift and go to state 94
    [               shift and go to state 23
    =               shift and go to state 25
    ;               shift and go to state 24


state 63

    (23) param -> type_spec IDENT . [ INTLIT ]
    (24) param -> type_spec IDENT .
    [               shift and go to state 95
    )               reduce using rule 24 (param -> type_spec IDENT .)
    ,               reduce using rule 24 (param -> type_spec IDENT .)


state 64

    (19) func_decl -> type_spec IDENT ( param_list ) . compound_stmt
    (25) compound_stmt -> . { local_decls stmt_list }
    {               shift and go to state 97

    compound_stmt                  shift and go to state 96

state 65

    (21) param_list -> param_list , . param
    (23) param -> . type_spec IDENT [ INTLIT ]
    (24) param -> . type_spec IDENT
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    param                          shift and go to state 98
    type_spec                      shift and go to state 36

state 66

    (61) var_decl -> type_spec IDENT [ INTLIT ] . ;
    ;               shift and go to state 99


state 67

    (70) expr -> IDENT . . SIZE
    (91) expr -> IDENT . . IDENT ( args_list )
    SIZE            shift and go to state 101
    IDENT           shift and go to state 100


state 68

    (93) expr -> IDENT ( . args_list )
    (56) args_list -> . args_list , expr
    (57) args_list -> . expr
    (58) args_list -> . empty
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    (103) empty -> .
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55
    )               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)

    args_list                      shift and go to state 102
    expr                           shift and go to state 103
    empty                          shift and go to state 104

state 69

    (94) expr -> IDENT [ . expr ]
    (95) expr -> IDENT [ . expr ] = expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 105

state 70

    (96) expr -> IDENT = . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 106

state 71

    (62) var_decl -> type_spec IDENT = expr ; .
    IDENT           reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    CLASS           reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    STRING          reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    BOOL            reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    FLOAT           reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    INT             reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    VOID            reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    $end            reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    PUBLIC          reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    PRIVATE         reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    }               reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    SUPER           reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    THIS            reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    PRINTF          reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    CONTINUE        reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    BREAK           reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    WHILE           reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    RETURN          reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    IF              reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    {               reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    (               reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    NOT             reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    DECREMENT       reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    INCREMENT       reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    +               reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    !               reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    -               reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    FALSE           reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    TRUE            reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    STRINGLIT       reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    BOOLIT          reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    FLOATLIT        reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)
    INTLIT          reduce using rule 62 (var_decl -> type_spec IDENT = expr ; .)


state 72

    (78) expr -> expr % . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 107

state 73

    (79) expr -> expr / . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 108

state 74

    (80) expr -> expr * . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 109

state 75

    (81) expr -> expr - . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 110

state 76

    (82) expr -> expr + . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 111

state 77

    (83) expr -> expr GE . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 112

state 78

    (84) expr -> expr GT . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 113

state 79

    (85) expr -> expr LE . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 114

state 80

    (86) expr -> expr LT . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 115

state 81

    (87) expr -> expr NE . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 116

state 82

    (88) expr -> expr EQ . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 117

state 83

    (89) expr -> expr AND . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 118

state 84

    (90) expr -> expr OR . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 119

state 85

    (71) expr -> ( expr . )
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    )               shift and go to state 120
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 86

    (72) expr -> NOT expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 72 (expr -> NOT expr .)
    %               reduce using rule 72 (expr -> NOT expr .)
    /               reduce using rule 72 (expr -> NOT expr .)
    *               reduce using rule 72 (expr -> NOT expr .)
    -               reduce using rule 72 (expr -> NOT expr .)
    +               reduce using rule 72 (expr -> NOT expr .)
    GE              reduce using rule 72 (expr -> NOT expr .)
    GT              reduce using rule 72 (expr -> NOT expr .)
    LE              reduce using rule 72 (expr -> NOT expr .)
    LT              reduce using rule 72 (expr -> NOT expr .)
    NE              reduce using rule 72 (expr -> NOT expr .)
    EQ              reduce using rule 72 (expr -> NOT expr .)
    AND             reduce using rule 72 (expr -> NOT expr .)
    OR              reduce using rule 72 (expr -> NOT expr .)
    )               reduce using rule 72 (expr -> NOT expr .)
    ,               reduce using rule 72 (expr -> NOT expr .)
    ]               reduce using rule 72 (expr -> NOT expr .)


state 87

    (73) expr -> DECREMENT expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 73 (expr -> DECREMENT expr .)
    %               reduce using rule 73 (expr -> DECREMENT expr .)
    /               reduce using rule 73 (expr -> DECREMENT expr .)
    *               reduce using rule 73 (expr -> DECREMENT expr .)
    -               reduce using rule 73 (expr -> DECREMENT expr .)
    +               reduce using rule 73 (expr -> DECREMENT expr .)
    GE              reduce using rule 73 (expr -> DECREMENT expr .)
    GT              reduce using rule 73 (expr -> DECREMENT expr .)
    LE              reduce using rule 73 (expr -> DECREMENT expr .)
    LT              reduce using rule 73 (expr -> DECREMENT expr .)
    NE              reduce using rule 73 (expr -> DECREMENT expr .)
    EQ              reduce using rule 73 (expr -> DECREMENT expr .)
    AND             reduce using rule 73 (expr -> DECREMENT expr .)
    OR              reduce using rule 73 (expr -> DECREMENT expr .)
    )               reduce using rule 73 (expr -> DECREMENT expr .)
    ,               reduce using rule 73 (expr -> DECREMENT expr .)
    ]               reduce using rule 73 (expr -> DECREMENT expr .)


state 88

    (74) expr -> INCREMENT expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 74 (expr -> INCREMENT expr .)
    %               reduce using rule 74 (expr -> INCREMENT expr .)
    /               reduce using rule 74 (expr -> INCREMENT expr .)
    *               reduce using rule 74 (expr -> INCREMENT expr .)
    -               reduce using rule 74 (expr -> INCREMENT expr .)
    +               reduce using rule 74 (expr -> INCREMENT expr .)
    GE              reduce using rule 74 (expr -> INCREMENT expr .)
    GT              reduce using rule 74 (expr -> INCREMENT expr .)
    LE              reduce using rule 74 (expr -> INCREMENT expr .)
    LT              reduce using rule 74 (expr -> INCREMENT expr .)
    NE              reduce using rule 74 (expr -> INCREMENT expr .)
    EQ              reduce using rule 74 (expr -> INCREMENT expr .)
    AND             reduce using rule 74 (expr -> INCREMENT expr .)
    OR              reduce using rule 74 (expr -> INCREMENT expr .)
    )               reduce using rule 74 (expr -> INCREMENT expr .)
    ,               reduce using rule 74 (expr -> INCREMENT expr .)
    ]               reduce using rule 74 (expr -> INCREMENT expr .)


state 89

    (75) expr -> + expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 75 (expr -> + expr .)
    %               reduce using rule 75 (expr -> + expr .)
    /               reduce using rule 75 (expr -> + expr .)
    *               reduce using rule 75 (expr -> + expr .)
    -               reduce using rule 75 (expr -> + expr .)
    +               reduce using rule 75 (expr -> + expr .)
    GE              reduce using rule 75 (expr -> + expr .)
    GT              reduce using rule 75 (expr -> + expr .)
    LE              reduce using rule 75 (expr -> + expr .)
    LT              reduce using rule 75 (expr -> + expr .)
    NE              reduce using rule 75 (expr -> + expr .)
    EQ              reduce using rule 75 (expr -> + expr .)
    AND             reduce using rule 75 (expr -> + expr .)
    OR              reduce using rule 75 (expr -> + expr .)
    )               reduce using rule 75 (expr -> + expr .)
    ,               reduce using rule 75 (expr -> + expr .)
    ]               reduce using rule 75 (expr -> + expr .)


state 90

    (76) expr -> ! expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 76 (expr -> ! expr .)
    %               reduce using rule 76 (expr -> ! expr .)
    /               reduce using rule 76 (expr -> ! expr .)
    *               reduce using rule 76 (expr -> ! expr .)
    -               reduce using rule 76 (expr -> ! expr .)
    +               reduce using rule 76 (expr -> ! expr .)
    GE              reduce using rule 76 (expr -> ! expr .)
    GT              reduce using rule 76 (expr -> ! expr .)
    LE              reduce using rule 76 (expr -> ! expr .)
    LT              reduce using rule 76 (expr -> ! expr .)
    NE              reduce using rule 76 (expr -> ! expr .)
    EQ              reduce using rule 76 (expr -> ! expr .)
    AND             reduce using rule 76 (expr -> ! expr .)
    OR              reduce using rule 76 (expr -> ! expr .)
    )               reduce using rule 76 (expr -> ! expr .)
    ,               reduce using rule 76 (expr -> ! expr .)
    ]               reduce using rule 76 (expr -> ! expr .)


state 91

    (77) expr -> - expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 77 (expr -> - expr .)
    %               reduce using rule 77 (expr -> - expr .)
    /               reduce using rule 77 (expr -> - expr .)
    *               reduce using rule 77 (expr -> - expr .)
    -               reduce using rule 77 (expr -> - expr .)
    +               reduce using rule 77 (expr -> - expr .)
    GE              reduce using rule 77 (expr -> - expr .)
    GT              reduce using rule 77 (expr -> - expr .)
    LE              reduce using rule 77 (expr -> - expr .)
    LT              reduce using rule 77 (expr -> - expr .)
    NE              reduce using rule 77 (expr -> - expr .)
    EQ              reduce using rule 77 (expr -> - expr .)
    AND             reduce using rule 77 (expr -> - expr .)
    OR              reduce using rule 77 (expr -> - expr .)
    )               reduce using rule 77 (expr -> - expr .)
    ,               reduce using rule 77 (expr -> - expr .)
    ]               reduce using rule 77 (expr -> - expr .)


state 92

    (18) constructor_decl -> IDENT ( param_list . ) compound_stmt
    (21) param_list -> param_list . , param
    )               shift and go to state 121
    ,               shift and go to state 65


state 93

    (8) class_decl -> CLASS IDENT { class_body } ; .
    IDENT           reduce using rule 8 (class_decl -> CLASS IDENT { class_body } ; .)
    CLASS           reduce using rule 8 (class_decl -> CLASS IDENT { class_body } ; .)
    STRING          reduce using rule 8 (class_decl -> CLASS IDENT { class_body } ; .)
    BOOL            reduce using rule 8 (class_decl -> CLASS IDENT { class_body } ; .)
    FLOAT           reduce using rule 8 (class_decl -> CLASS IDENT { class_body } ; .)
    INT             reduce using rule 8 (class_decl -> CLASS IDENT { class_body } ; .)
    VOID            reduce using rule 8 (class_decl -> CLASS IDENT { class_body } ; .)
    $end            reduce using rule 8 (class_decl -> CLASS IDENT { class_body } ; .)


state 94

    (17) method_decl -> type_spec IDENT ( . param_list ) compound_stmt
    (20) param_list -> . param
    (21) param_list -> . param_list , param
    (22) param_list -> . empty
    (23) param -> . type_spec IDENT [ INTLIT ]
    (24) param -> . type_spec IDENT
    (103) empty -> .
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    )               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    type_spec                      shift and go to state 36
    param_list                     shift and go to state 122
    param                          shift and go to state 38
    empty                          shift and go to state 39

state 95

    (23) param -> type_spec IDENT [ . INTLIT ]
    INTLIT          shift and go to state 123


state 96

    (19) func_decl -> type_spec IDENT ( param_list ) compound_stmt .
    IDENT           reduce using rule 19 (func_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    CLASS           reduce using rule 19 (func_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    STRING          reduce using rule 19 (func_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    BOOL            reduce using rule 19 (func_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    FLOAT           reduce using rule 19 (func_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    INT             reduce using rule 19 (func_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    VOID            reduce using rule 19 (func_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    $end            reduce using rule 19 (func_decl -> type_spec IDENT ( param_list ) compound_stmt .)


state 97

    (25) compound_stmt -> { . local_decls stmt_list }
    (26) local_decls -> . empty
    (27) local_decls -> . var_decl local_decls
    (103) empty -> .
    (61) var_decl -> . type_spec IDENT [ INTLIT ] ;
    (62) var_decl -> . type_spec IDENT = expr ;
    (63) var_decl -> . type_spec IDENT ;
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    IDENT           reduce using rule 103 (empty -> .)
    SUPER           reduce using rule 103 (empty -> .)
    PUBLIC          reduce using rule 103 (empty -> .)
    PRIVATE         reduce using rule 103 (empty -> .)
    THIS            reduce using rule 103 (empty -> .)
    PRINTF          reduce using rule 103 (empty -> .)
    CONTINUE        reduce using rule 103 (empty -> .)
    BREAK           reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    {               reduce using rule 103 (empty -> .)
    (               reduce using rule 103 (empty -> .)
    NOT             reduce using rule 103 (empty -> .)
    DECREMENT       reduce using rule 103 (empty -> .)
    INCREMENT       reduce using rule 103 (empty -> .)
    +               reduce using rule 103 (empty -> .)
    !               reduce using rule 103 (empty -> .)
    -               reduce using rule 103 (empty -> .)
    FALSE           reduce using rule 103 (empty -> .)
    TRUE            reduce using rule 103 (empty -> .)
    STRINGLIT       reduce using rule 103 (empty -> .)
    BOOLIT          reduce using rule 103 (empty -> .)
    FLOATLIT        reduce using rule 103 (empty -> .)
    INTLIT          reduce using rule 103 (empty -> .)
    }               reduce using rule 103 (empty -> .)
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    local_decls                    shift and go to state 124
    empty                          shift and go to state 125
    var_decl                       shift and go to state 126
    type_spec                      shift and go to state 127

state 98

    (21) param_list -> param_list , param .
    )               reduce using rule 21 (param_list -> param_list , param .)
    ,               reduce using rule 21 (param_list -> param_list , param .)


state 99

    (61) var_decl -> type_spec IDENT [ INTLIT ] ; .
    IDENT           reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    CLASS           reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    STRING          reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    BOOL            reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    FLOAT           reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    INT             reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    VOID            reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    $end            reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    PUBLIC          reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    PRIVATE         reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    }               reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    SUPER           reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    THIS            reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    PRINTF          reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    CONTINUE        reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    BREAK           reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    WHILE           reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    RETURN          reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    IF              reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    {               reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    (               reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    NOT             reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    DECREMENT       reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    INCREMENT       reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    +               reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    !               reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    -               reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    FALSE           reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    TRUE            reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    STRINGLIT       reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    BOOLIT          reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    FLOATLIT        reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)
    INTLIT          reduce using rule 61 (var_decl -> type_spec IDENT [ INTLIT ] ; .)


state 100

    (91) expr -> IDENT . IDENT . ( args_list )
    (               shift and go to state 128


state 101

    (70) expr -> IDENT . SIZE .
    ;               reduce using rule 70 (expr -> IDENT . SIZE .)
    %               reduce using rule 70 (expr -> IDENT . SIZE .)
    /               reduce using rule 70 (expr -> IDENT . SIZE .)
    *               reduce using rule 70 (expr -> IDENT . SIZE .)
    -               reduce using rule 70 (expr -> IDENT . SIZE .)
    +               reduce using rule 70 (expr -> IDENT . SIZE .)
    GE              reduce using rule 70 (expr -> IDENT . SIZE .)
    GT              reduce using rule 70 (expr -> IDENT . SIZE .)
    LE              reduce using rule 70 (expr -> IDENT . SIZE .)
    LT              reduce using rule 70 (expr -> IDENT . SIZE .)
    NE              reduce using rule 70 (expr -> IDENT . SIZE .)
    EQ              reduce using rule 70 (expr -> IDENT . SIZE .)
    AND             reduce using rule 70 (expr -> IDENT . SIZE .)
    OR              reduce using rule 70 (expr -> IDENT . SIZE .)
    )               reduce using rule 70 (expr -> IDENT . SIZE .)
    ,               reduce using rule 70 (expr -> IDENT . SIZE .)
    ]               reduce using rule 70 (expr -> IDENT . SIZE .)


state 102

    (93) expr -> IDENT ( args_list . )
    (56) args_list -> args_list . , expr
    )               shift and go to state 129
    ,               shift and go to state 130


state 103

    (57) args_list -> expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    )               reduce using rule 57 (args_list -> expr .)
    ,               reduce using rule 57 (args_list -> expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 104

    (58) args_list -> empty .
    )               reduce using rule 58 (args_list -> empty .)
    ,               reduce using rule 58 (args_list -> empty .)


state 105

    (94) expr -> IDENT [ expr . ]
    (95) expr -> IDENT [ expr . ] = expr
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ]               shift and go to state 131
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 106

    (96) expr -> IDENT = expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 96 (expr -> IDENT = expr .)
    )               reduce using rule 96 (expr -> IDENT = expr .)
    ,               reduce using rule 96 (expr -> IDENT = expr .)
    ]               reduce using rule 96 (expr -> IDENT = expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 107

    (78) expr -> expr % expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 78 (expr -> expr % expr .)
    %               reduce using rule 78 (expr -> expr % expr .)
    /               reduce using rule 78 (expr -> expr % expr .)
    *               reduce using rule 78 (expr -> expr % expr .)
    -               reduce using rule 78 (expr -> expr % expr .)
    +               reduce using rule 78 (expr -> expr % expr .)
    GE              reduce using rule 78 (expr -> expr % expr .)
    GT              reduce using rule 78 (expr -> expr % expr .)
    LE              reduce using rule 78 (expr -> expr % expr .)
    LT              reduce using rule 78 (expr -> expr % expr .)
    NE              reduce using rule 78 (expr -> expr % expr .)
    EQ              reduce using rule 78 (expr -> expr % expr .)
    AND             reduce using rule 78 (expr -> expr % expr .)
    OR              reduce using rule 78 (expr -> expr % expr .)
    )               reduce using rule 78 (expr -> expr % expr .)
    ,               reduce using rule 78 (expr -> expr % expr .)
    ]               reduce using rule 78 (expr -> expr % expr .)


state 108

    (79) expr -> expr / expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 79 (expr -> expr / expr .)
    %               reduce using rule 79 (expr -> expr / expr .)
    /               reduce using rule 79 (expr -> expr / expr .)
    *               reduce using rule 79 (expr -> expr / expr .)
    -               reduce using rule 79 (expr -> expr / expr .)
    +               reduce using rule 79 (expr -> expr / expr .)
    GE              reduce using rule 79 (expr -> expr / expr .)
    GT              reduce using rule 79 (expr -> expr / expr .)
    LE              reduce using rule 79 (expr -> expr / expr .)
    LT              reduce using rule 79 (expr -> expr / expr .)
    NE              reduce using rule 79 (expr -> expr / expr .)
    EQ              reduce using rule 79 (expr -> expr / expr .)
    AND             reduce using rule 79 (expr -> expr / expr .)
    OR              reduce using rule 79 (expr -> expr / expr .)
    )               reduce using rule 79 (expr -> expr / expr .)
    ,               reduce using rule 79 (expr -> expr / expr .)
    ]               reduce using rule 79 (expr -> expr / expr .)


state 109

    (80) expr -> expr * expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 80 (expr -> expr * expr .)
    %               reduce using rule 80 (expr -> expr * expr .)
    /               reduce using rule 80 (expr -> expr * expr .)
    *               reduce using rule 80 (expr -> expr * expr .)
    -               reduce using rule 80 (expr -> expr * expr .)
    +               reduce using rule 80 (expr -> expr * expr .)
    GE              reduce using rule 80 (expr -> expr * expr .)
    GT              reduce using rule 80 (expr -> expr * expr .)
    LE              reduce using rule 80 (expr -> expr * expr .)
    LT              reduce using rule 80 (expr -> expr * expr .)
    NE              reduce using rule 80 (expr -> expr * expr .)
    EQ              reduce using rule 80 (expr -> expr * expr .)
    AND             reduce using rule 80 (expr -> expr * expr .)
    OR              reduce using rule 80 (expr -> expr * expr .)
    )               reduce using rule 80 (expr -> expr * expr .)
    ,               reduce using rule 80 (expr -> expr * expr .)
    ]               reduce using rule 80 (expr -> expr * expr .)


state 110

    (81) expr -> expr - expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 81 (expr -> expr - expr .)
    -               reduce using rule 81 (expr -> expr - expr .)
    +               reduce using rule 81 (expr -> expr - expr .)
    GE              reduce using rule 81 (expr -> expr - expr .)
    GT              reduce using rule 81 (expr -> expr - expr .)
    LE              reduce using rule 81 (expr -> expr - expr .)
    LT              reduce using rule 81 (expr -> expr - expr .)
    NE              reduce using rule 81 (expr -> expr - expr .)
    EQ              reduce using rule 81 (expr -> expr - expr .)
    AND             reduce using rule 81 (expr -> expr - expr .)
    OR              reduce using rule 81 (expr -> expr - expr .)
    )               reduce using rule 81 (expr -> expr - expr .)
    ,               reduce using rule 81 (expr -> expr - expr .)
    ]               reduce using rule 81 (expr -> expr - expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74


state 111

    (82) expr -> expr + expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 82 (expr -> expr + expr .)
    -               reduce using rule 82 (expr -> expr + expr .)
    +               reduce using rule 82 (expr -> expr + expr .)
    GE              reduce using rule 82 (expr -> expr + expr .)
    GT              reduce using rule 82 (expr -> expr + expr .)
    LE              reduce using rule 82 (expr -> expr + expr .)
    LT              reduce using rule 82 (expr -> expr + expr .)
    NE              reduce using rule 82 (expr -> expr + expr .)
    EQ              reduce using rule 82 (expr -> expr + expr .)
    AND             reduce using rule 82 (expr -> expr + expr .)
    OR              reduce using rule 82 (expr -> expr + expr .)
    )               reduce using rule 82 (expr -> expr + expr .)
    ,               reduce using rule 82 (expr -> expr + expr .)
    ]               reduce using rule 82 (expr -> expr + expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74


state 112

    (83) expr -> expr GE expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 83 (expr -> expr GE expr .)
    GE              reduce using rule 83 (expr -> expr GE expr .)
    GT              reduce using rule 83 (expr -> expr GE expr .)
    LE              reduce using rule 83 (expr -> expr GE expr .)
    LT              reduce using rule 83 (expr -> expr GE expr .)
    NE              reduce using rule 83 (expr -> expr GE expr .)
    EQ              reduce using rule 83 (expr -> expr GE expr .)
    AND             reduce using rule 83 (expr -> expr GE expr .)
    OR              reduce using rule 83 (expr -> expr GE expr .)
    )               reduce using rule 83 (expr -> expr GE expr .)
    ,               reduce using rule 83 (expr -> expr GE expr .)
    ]               reduce using rule 83 (expr -> expr GE expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76


state 113

    (84) expr -> expr GT expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 84 (expr -> expr GT expr .)
    GE              reduce using rule 84 (expr -> expr GT expr .)
    GT              reduce using rule 84 (expr -> expr GT expr .)
    LE              reduce using rule 84 (expr -> expr GT expr .)
    LT              reduce using rule 84 (expr -> expr GT expr .)
    NE              reduce using rule 84 (expr -> expr GT expr .)
    EQ              reduce using rule 84 (expr -> expr GT expr .)
    AND             reduce using rule 84 (expr -> expr GT expr .)
    OR              reduce using rule 84 (expr -> expr GT expr .)
    )               reduce using rule 84 (expr -> expr GT expr .)
    ,               reduce using rule 84 (expr -> expr GT expr .)
    ]               reduce using rule 84 (expr -> expr GT expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76


state 114

    (85) expr -> expr LE expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 85 (expr -> expr LE expr .)
    GE              reduce using rule 85 (expr -> expr LE expr .)
    GT              reduce using rule 85 (expr -> expr LE expr .)
    LE              reduce using rule 85 (expr -> expr LE expr .)
    LT              reduce using rule 85 (expr -> expr LE expr .)
    NE              reduce using rule 85 (expr -> expr LE expr .)
    EQ              reduce using rule 85 (expr -> expr LE expr .)
    AND             reduce using rule 85 (expr -> expr LE expr .)
    OR              reduce using rule 85 (expr -> expr LE expr .)
    )               reduce using rule 85 (expr -> expr LE expr .)
    ,               reduce using rule 85 (expr -> expr LE expr .)
    ]               reduce using rule 85 (expr -> expr LE expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76


state 115

    (86) expr -> expr LT expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 86 (expr -> expr LT expr .)
    GE              reduce using rule 86 (expr -> expr LT expr .)
    GT              reduce using rule 86 (expr -> expr LT expr .)
    LE              reduce using rule 86 (expr -> expr LT expr .)
    LT              reduce using rule 86 (expr -> expr LT expr .)
    NE              reduce using rule 86 (expr -> expr LT expr .)
    EQ              reduce using rule 86 (expr -> expr LT expr .)
    AND             reduce using rule 86 (expr -> expr LT expr .)
    OR              reduce using rule 86 (expr -> expr LT expr .)
    )               reduce using rule 86 (expr -> expr LT expr .)
    ,               reduce using rule 86 (expr -> expr LT expr .)
    ]               reduce using rule 86 (expr -> expr LT expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76


state 116

    (87) expr -> expr NE expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 87 (expr -> expr NE expr .)
    NE              reduce using rule 87 (expr -> expr NE expr .)
    EQ              reduce using rule 87 (expr -> expr NE expr .)
    AND             reduce using rule 87 (expr -> expr NE expr .)
    OR              reduce using rule 87 (expr -> expr NE expr .)
    )               reduce using rule 87 (expr -> expr NE expr .)
    ,               reduce using rule 87 (expr -> expr NE expr .)
    ]               reduce using rule 87 (expr -> expr NE expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80


state 117

    (88) expr -> expr EQ expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 88 (expr -> expr EQ expr .)
    NE              reduce using rule 88 (expr -> expr EQ expr .)
    EQ              reduce using rule 88 (expr -> expr EQ expr .)
    AND             reduce using rule 88 (expr -> expr EQ expr .)
    OR              reduce using rule 88 (expr -> expr EQ expr .)
    )               reduce using rule 88 (expr -> expr EQ expr .)
    ,               reduce using rule 88 (expr -> expr EQ expr .)
    ]               reduce using rule 88 (expr -> expr EQ expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80


state 118

    (89) expr -> expr AND expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 89 (expr -> expr AND expr .)
    AND             reduce using rule 89 (expr -> expr AND expr .)
    OR              reduce using rule 89 (expr -> expr AND expr .)
    )               reduce using rule 89 (expr -> expr AND expr .)
    ,               reduce using rule 89 (expr -> expr AND expr .)
    ]               reduce using rule 89 (expr -> expr AND expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82


state 119

    (90) expr -> expr OR expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 90 (expr -> expr OR expr .)
    OR              reduce using rule 90 (expr -> expr OR expr .)
    )               reduce using rule 90 (expr -> expr OR expr .)
    ,               reduce using rule 90 (expr -> expr OR expr .)
    ]               reduce using rule 90 (expr -> expr OR expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83


state 120

    (71) expr -> ( expr ) .
    ;               reduce using rule 71 (expr -> ( expr ) .)
    %               reduce using rule 71 (expr -> ( expr ) .)
    /               reduce using rule 71 (expr -> ( expr ) .)
    *               reduce using rule 71 (expr -> ( expr ) .)
    -               reduce using rule 71 (expr -> ( expr ) .)
    +               reduce using rule 71 (expr -> ( expr ) .)
    GE              reduce using rule 71 (expr -> ( expr ) .)
    GT              reduce using rule 71 (expr -> ( expr ) .)
    LE              reduce using rule 71 (expr -> ( expr ) .)
    LT              reduce using rule 71 (expr -> ( expr ) .)
    NE              reduce using rule 71 (expr -> ( expr ) .)
    EQ              reduce using rule 71 (expr -> ( expr ) .)
    AND             reduce using rule 71 (expr -> ( expr ) .)
    OR              reduce using rule 71 (expr -> ( expr ) .)
    )               reduce using rule 71 (expr -> ( expr ) .)
    ,               reduce using rule 71 (expr -> ( expr ) .)
    ]               reduce using rule 71 (expr -> ( expr ) .)


state 121

    (18) constructor_decl -> IDENT ( param_list ) . compound_stmt
    (25) compound_stmt -> . { local_decls stmt_list }
    {               shift and go to state 97

    compound_stmt                  shift and go to state 132

state 122

    (17) method_decl -> type_spec IDENT ( param_list . ) compound_stmt
    (21) param_list -> param_list . , param
    )               shift and go to state 133
    ,               shift and go to state 65


state 123

    (23) param -> type_spec IDENT [ INTLIT . ]
    ]               shift and go to state 134


state 124

    (25) compound_stmt -> { local_decls . stmt_list }
    (28) stmt_list -> . stmt stmt_list
    (29) stmt_list -> . empty
    (30) stmt -> . var_decl_instance
    (31) stmt -> . super_stmt
    (32) stmt -> . public_stmt
    (33) stmt -> . private_stmt
    (34) stmt -> . this_stmt
    (35) stmt -> . new_stmt
    (36) stmt -> . print_stmt
    (37) stmt -> . continue_stmt
    (38) stmt -> . break_stmt
    (39) stmt -> . while_stmt
    (40) stmt -> . return_stmt
    (41) stmt -> . if_stmt
    (42) stmt -> . compound_stmt
    (43) stmt -> . expr_stmt
    (103) empty -> .
    (64) var_decl_instance -> . IDENT IDENT ;
    (44) super_stmt -> . SUPER ( args_list ) ;
    (49) public_stmt -> . PUBLIC : stmt
    (48) private_stmt -> . PRIVATE : stmt
    (60) this_stmt -> . THIS ;
    (55) new_stmt -> . IDENT = NEW IDENT ( args_list ) ;
    (59) print_stmt -> . PRINTF ( expr ) ;
    (54) continue_stmt -> . CONTINUE ;
    (53) break_stmt -> . BREAK ;
    (52) while_stmt -> . WHILE ( expr ) stmt
    (50) return_stmt -> . RETURN expr ;
    (51) return_stmt -> . RETURN ;
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (25) compound_stmt -> . { local_decls stmt_list }
    (45) expr_stmt -> . expr ;
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    }               reduce using rule 103 (empty -> .)
    IDENT           shift and go to state 152
    SUPER           shift and go to state 153
    PUBLIC          shift and go to state 154
    PRIVATE         shift and go to state 155
    THIS            shift and go to state 156
    PRINTF          shift and go to state 157
    CONTINUE        shift and go to state 159
    BREAK           shift and go to state 160
    WHILE           shift and go to state 161
    RETURN          shift and go to state 162
    IF              shift and go to state 163
    {               shift and go to state 97
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    stmt_list                      shift and go to state 135
    stmt                           shift and go to state 136
    empty                          shift and go to state 137
    var_decl_instance              shift and go to state 138
    super_stmt                     shift and go to state 139
    public_stmt                    shift and go to state 140
    private_stmt                   shift and go to state 141
    this_stmt                      shift and go to state 142
    new_stmt                       shift and go to state 143
    print_stmt                     shift and go to state 144
    continue_stmt                  shift and go to state 145
    break_stmt                     shift and go to state 146
    while_stmt                     shift and go to state 147
    return_stmt                    shift and go to state 148
    if_stmt                        shift and go to state 149
    compound_stmt                  shift and go to state 150
    expr_stmt                      shift and go to state 151
    expr                           shift and go to state 158

state 125

    (26) local_decls -> empty .
    IDENT           reduce using rule 26 (local_decls -> empty .)
    SUPER           reduce using rule 26 (local_decls -> empty .)
    PUBLIC          reduce using rule 26 (local_decls -> empty .)
    PRIVATE         reduce using rule 26 (local_decls -> empty .)
    THIS            reduce using rule 26 (local_decls -> empty .)
    PRINTF          reduce using rule 26 (local_decls -> empty .)
    CONTINUE        reduce using rule 26 (local_decls -> empty .)
    BREAK           reduce using rule 26 (local_decls -> empty .)
    WHILE           reduce using rule 26 (local_decls -> empty .)
    RETURN          reduce using rule 26 (local_decls -> empty .)
    IF              reduce using rule 26 (local_decls -> empty .)
    {               reduce using rule 26 (local_decls -> empty .)
    (               reduce using rule 26 (local_decls -> empty .)
    NOT             reduce using rule 26 (local_decls -> empty .)
    DECREMENT       reduce using rule 26 (local_decls -> empty .)
    INCREMENT       reduce using rule 26 (local_decls -> empty .)
    +               reduce using rule 26 (local_decls -> empty .)
    !               reduce using rule 26 (local_decls -> empty .)
    -               reduce using rule 26 (local_decls -> empty .)
    FALSE           reduce using rule 26 (local_decls -> empty .)
    TRUE            reduce using rule 26 (local_decls -> empty .)
    STRINGLIT       reduce using rule 26 (local_decls -> empty .)
    BOOLIT          reduce using rule 26 (local_decls -> empty .)
    FLOATLIT        reduce using rule 26 (local_decls -> empty .)
    INTLIT          reduce using rule 26 (local_decls -> empty .)
    }               reduce using rule 26 (local_decls -> empty .)


state 126

    (27) local_decls -> var_decl . local_decls
    (26) local_decls -> . empty
    (27) local_decls -> . var_decl local_decls
    (103) empty -> .
    (61) var_decl -> . type_spec IDENT [ INTLIT ] ;
    (62) var_decl -> . type_spec IDENT = expr ;
    (63) var_decl -> . type_spec IDENT ;
    (65) type_spec -> . STRING
    (66) type_spec -> . BOOL
    (67) type_spec -> . FLOAT
    (68) type_spec -> . INT
    (69) type_spec -> . VOID
    IDENT           reduce using rule 103 (empty -> .)
    SUPER           reduce using rule 103 (empty -> .)
    PUBLIC          reduce using rule 103 (empty -> .)
    PRIVATE         reduce using rule 103 (empty -> .)
    THIS            reduce using rule 103 (empty -> .)
    PRINTF          reduce using rule 103 (empty -> .)
    CONTINUE        reduce using rule 103 (empty -> .)
    BREAK           reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    {               reduce using rule 103 (empty -> .)
    (               reduce using rule 103 (empty -> .)
    NOT             reduce using rule 103 (empty -> .)
    DECREMENT       reduce using rule 103 (empty -> .)
    INCREMENT       reduce using rule 103 (empty -> .)
    +               reduce using rule 103 (empty -> .)
    !               reduce using rule 103 (empty -> .)
    -               reduce using rule 103 (empty -> .)
    FALSE           reduce using rule 103 (empty -> .)
    TRUE            reduce using rule 103 (empty -> .)
    STRINGLIT       reduce using rule 103 (empty -> .)
    BOOLIT          reduce using rule 103 (empty -> .)
    FLOATLIT        reduce using rule 103 (empty -> .)
    INTLIT          reduce using rule 103 (empty -> .)
    }               reduce using rule 103 (empty -> .)
    STRING          shift and go to state 11
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    INT             shift and go to state 14
    VOID            shift and go to state 15

    var_decl                       shift and go to state 126
    local_decls                    shift and go to state 164
    empty                          shift and go to state 125
    type_spec                      shift and go to state 127

state 127

    (61) var_decl -> type_spec . IDENT [ INTLIT ] ;
    (62) var_decl -> type_spec . IDENT = expr ;
    (63) var_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 165


state 128

    (91) expr -> IDENT . IDENT ( . args_list )
    (56) args_list -> . args_list , expr
    (57) args_list -> . expr
    (58) args_list -> . empty
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    (103) empty -> .
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55
    )               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)

    args_list                      shift and go to state 166
    expr                           shift and go to state 103
    empty                          shift and go to state 104

state 129

    (93) expr -> IDENT ( args_list ) .
    ;               reduce using rule 93 (expr -> IDENT ( args_list ) .)
    %               reduce using rule 93 (expr -> IDENT ( args_list ) .)
    /               reduce using rule 93 (expr -> IDENT ( args_list ) .)
    *               reduce using rule 93 (expr -> IDENT ( args_list ) .)
    -               reduce using rule 93 (expr -> IDENT ( args_list ) .)
    +               reduce using rule 93 (expr -> IDENT ( args_list ) .)
    GE              reduce using rule 93 (expr -> IDENT ( args_list ) .)
    GT              reduce using rule 93 (expr -> IDENT ( args_list ) .)
    LE              reduce using rule 93 (expr -> IDENT ( args_list ) .)
    LT              reduce using rule 93 (expr -> IDENT ( args_list ) .)
    NE              reduce using rule 93 (expr -> IDENT ( args_list ) .)
    EQ              reduce using rule 93 (expr -> IDENT ( args_list ) .)
    AND             reduce using rule 93 (expr -> IDENT ( args_list ) .)
    OR              reduce using rule 93 (expr -> IDENT ( args_list ) .)
    )               reduce using rule 93 (expr -> IDENT ( args_list ) .)
    ,               reduce using rule 93 (expr -> IDENT ( args_list ) .)
    ]               reduce using rule 93 (expr -> IDENT ( args_list ) .)


state 130

    (56) args_list -> args_list , . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 167

state 131

    (94) expr -> IDENT [ expr ] .
    (95) expr -> IDENT [ expr ] . = expr
    ;               reduce using rule 94 (expr -> IDENT [ expr ] .)
    %               reduce using rule 94 (expr -> IDENT [ expr ] .)
    /               reduce using rule 94 (expr -> IDENT [ expr ] .)
    *               reduce using rule 94 (expr -> IDENT [ expr ] .)
    -               reduce using rule 94 (expr -> IDENT [ expr ] .)
    +               reduce using rule 94 (expr -> IDENT [ expr ] .)
    GE              reduce using rule 94 (expr -> IDENT [ expr ] .)
    GT              reduce using rule 94 (expr -> IDENT [ expr ] .)
    LE              reduce using rule 94 (expr -> IDENT [ expr ] .)
    LT              reduce using rule 94 (expr -> IDENT [ expr ] .)
    NE              reduce using rule 94 (expr -> IDENT [ expr ] .)
    EQ              reduce using rule 94 (expr -> IDENT [ expr ] .)
    AND             reduce using rule 94 (expr -> IDENT [ expr ] .)
    OR              reduce using rule 94 (expr -> IDENT [ expr ] .)
    )               reduce using rule 94 (expr -> IDENT [ expr ] .)
    ,               reduce using rule 94 (expr -> IDENT [ expr ] .)
    ]               reduce using rule 94 (expr -> IDENT [ expr ] .)
    =               shift and go to state 168


state 132

    (18) constructor_decl -> IDENT ( param_list ) compound_stmt .
    PUBLIC          reduce using rule 18 (constructor_decl -> IDENT ( param_list ) compound_stmt .)
    PRIVATE         reduce using rule 18 (constructor_decl -> IDENT ( param_list ) compound_stmt .)
    IDENT           reduce using rule 18 (constructor_decl -> IDENT ( param_list ) compound_stmt .)
    STRING          reduce using rule 18 (constructor_decl -> IDENT ( param_list ) compound_stmt .)
    BOOL            reduce using rule 18 (constructor_decl -> IDENT ( param_list ) compound_stmt .)
    FLOAT           reduce using rule 18 (constructor_decl -> IDENT ( param_list ) compound_stmt .)
    INT             reduce using rule 18 (constructor_decl -> IDENT ( param_list ) compound_stmt .)
    VOID            reduce using rule 18 (constructor_decl -> IDENT ( param_list ) compound_stmt .)
    }               reduce using rule 18 (constructor_decl -> IDENT ( param_list ) compound_stmt .)


state 133

    (17) method_decl -> type_spec IDENT ( param_list ) . compound_stmt
    (25) compound_stmt -> . { local_decls stmt_list }
    {               shift and go to state 97

    compound_stmt                  shift and go to state 169

state 134

    (23) param -> type_spec IDENT [ INTLIT ] .
    )               reduce using rule 23 (param -> type_spec IDENT [ INTLIT ] .)
    ,               reduce using rule 23 (param -> type_spec IDENT [ INTLIT ] .)


state 135

    (25) compound_stmt -> { local_decls stmt_list . }
    }               shift and go to state 170


state 136

    (28) stmt_list -> stmt . stmt_list
    (28) stmt_list -> . stmt stmt_list
    (29) stmt_list -> . empty
    (30) stmt -> . var_decl_instance
    (31) stmt -> . super_stmt
    (32) stmt -> . public_stmt
    (33) stmt -> . private_stmt
    (34) stmt -> . this_stmt
    (35) stmt -> . new_stmt
    (36) stmt -> . print_stmt
    (37) stmt -> . continue_stmt
    (38) stmt -> . break_stmt
    (39) stmt -> . while_stmt
    (40) stmt -> . return_stmt
    (41) stmt -> . if_stmt
    (42) stmt -> . compound_stmt
    (43) stmt -> . expr_stmt
    (103) empty -> .
    (64) var_decl_instance -> . IDENT IDENT ;
    (44) super_stmt -> . SUPER ( args_list ) ;
    (49) public_stmt -> . PUBLIC : stmt
    (48) private_stmt -> . PRIVATE : stmt
    (60) this_stmt -> . THIS ;
    (55) new_stmt -> . IDENT = NEW IDENT ( args_list ) ;
    (59) print_stmt -> . PRINTF ( expr ) ;
    (54) continue_stmt -> . CONTINUE ;
    (53) break_stmt -> . BREAK ;
    (52) while_stmt -> . WHILE ( expr ) stmt
    (50) return_stmt -> . RETURN expr ;
    (51) return_stmt -> . RETURN ;
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (25) compound_stmt -> . { local_decls stmt_list }
    (45) expr_stmt -> . expr ;
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    }               reduce using rule 103 (empty -> .)
    IDENT           shift and go to state 152
    SUPER           shift and go to state 153
    PUBLIC          shift and go to state 154
    PRIVATE         shift and go to state 155
    THIS            shift and go to state 156
    PRINTF          shift and go to state 157
    CONTINUE        shift and go to state 159
    BREAK           shift and go to state 160
    WHILE           shift and go to state 161
    RETURN          shift and go to state 162
    IF              shift and go to state 163
    {               shift and go to state 97
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    stmt                           shift and go to state 136
    stmt_list                      shift and go to state 171
    empty                          shift and go to state 137
    var_decl_instance              shift and go to state 138
    super_stmt                     shift and go to state 139
    public_stmt                    shift and go to state 140
    private_stmt                   shift and go to state 141
    this_stmt                      shift and go to state 142
    new_stmt                       shift and go to state 143
    print_stmt                     shift and go to state 144
    continue_stmt                  shift and go to state 145
    break_stmt                     shift and go to state 146
    while_stmt                     shift and go to state 147
    return_stmt                    shift and go to state 148
    if_stmt                        shift and go to state 149
    compound_stmt                  shift and go to state 150
    expr_stmt                      shift and go to state 151
    expr                           shift and go to state 158

state 137

    (29) stmt_list -> empty .
    }               reduce using rule 29 (stmt_list -> empty .)


state 138

    (30) stmt -> var_decl_instance .
    IDENT           reduce using rule 30 (stmt -> var_decl_instance .)
    SUPER           reduce using rule 30 (stmt -> var_decl_instance .)
    PUBLIC          reduce using rule 30 (stmt -> var_decl_instance .)
    PRIVATE         reduce using rule 30 (stmt -> var_decl_instance .)
    THIS            reduce using rule 30 (stmt -> var_decl_instance .)
    PRINTF          reduce using rule 30 (stmt -> var_decl_instance .)
    CONTINUE        reduce using rule 30 (stmt -> var_decl_instance .)
    BREAK           reduce using rule 30 (stmt -> var_decl_instance .)
    WHILE           reduce using rule 30 (stmt -> var_decl_instance .)
    RETURN          reduce using rule 30 (stmt -> var_decl_instance .)
    IF              reduce using rule 30 (stmt -> var_decl_instance .)
    {               reduce using rule 30 (stmt -> var_decl_instance .)
    (               reduce using rule 30 (stmt -> var_decl_instance .)
    NOT             reduce using rule 30 (stmt -> var_decl_instance .)
    DECREMENT       reduce using rule 30 (stmt -> var_decl_instance .)
    INCREMENT       reduce using rule 30 (stmt -> var_decl_instance .)
    +               reduce using rule 30 (stmt -> var_decl_instance .)
    !               reduce using rule 30 (stmt -> var_decl_instance .)
    -               reduce using rule 30 (stmt -> var_decl_instance .)
    FALSE           reduce using rule 30 (stmt -> var_decl_instance .)
    TRUE            reduce using rule 30 (stmt -> var_decl_instance .)
    STRINGLIT       reduce using rule 30 (stmt -> var_decl_instance .)
    BOOLIT          reduce using rule 30 (stmt -> var_decl_instance .)
    FLOATLIT        reduce using rule 30 (stmt -> var_decl_instance .)
    INTLIT          reduce using rule 30 (stmt -> var_decl_instance .)
    }               reduce using rule 30 (stmt -> var_decl_instance .)
    ELSE            reduce using rule 30 (stmt -> var_decl_instance .)


state 139

    (31) stmt -> super_stmt .
    IDENT           reduce using rule 31 (stmt -> super_stmt .)
    SUPER           reduce using rule 31 (stmt -> super_stmt .)
    PUBLIC          reduce using rule 31 (stmt -> super_stmt .)
    PRIVATE         reduce using rule 31 (stmt -> super_stmt .)
    THIS            reduce using rule 31 (stmt -> super_stmt .)
    PRINTF          reduce using rule 31 (stmt -> super_stmt .)
    CONTINUE        reduce using rule 31 (stmt -> super_stmt .)
    BREAK           reduce using rule 31 (stmt -> super_stmt .)
    WHILE           reduce using rule 31 (stmt -> super_stmt .)
    RETURN          reduce using rule 31 (stmt -> super_stmt .)
    IF              reduce using rule 31 (stmt -> super_stmt .)
    {               reduce using rule 31 (stmt -> super_stmt .)
    (               reduce using rule 31 (stmt -> super_stmt .)
    NOT             reduce using rule 31 (stmt -> super_stmt .)
    DECREMENT       reduce using rule 31 (stmt -> super_stmt .)
    INCREMENT       reduce using rule 31 (stmt -> super_stmt .)
    +               reduce using rule 31 (stmt -> super_stmt .)
    !               reduce using rule 31 (stmt -> super_stmt .)
    -               reduce using rule 31 (stmt -> super_stmt .)
    FALSE           reduce using rule 31 (stmt -> super_stmt .)
    TRUE            reduce using rule 31 (stmt -> super_stmt .)
    STRINGLIT       reduce using rule 31 (stmt -> super_stmt .)
    BOOLIT          reduce using rule 31 (stmt -> super_stmt .)
    FLOATLIT        reduce using rule 31 (stmt -> super_stmt .)
    INTLIT          reduce using rule 31 (stmt -> super_stmt .)
    }               reduce using rule 31 (stmt -> super_stmt .)
    ELSE            reduce using rule 31 (stmt -> super_stmt .)


state 140

    (32) stmt -> public_stmt .
    IDENT           reduce using rule 32 (stmt -> public_stmt .)
    SUPER           reduce using rule 32 (stmt -> public_stmt .)
    PUBLIC          reduce using rule 32 (stmt -> public_stmt .)
    PRIVATE         reduce using rule 32 (stmt -> public_stmt .)
    THIS            reduce using rule 32 (stmt -> public_stmt .)
    PRINTF          reduce using rule 32 (stmt -> public_stmt .)
    CONTINUE        reduce using rule 32 (stmt -> public_stmt .)
    BREAK           reduce using rule 32 (stmt -> public_stmt .)
    WHILE           reduce using rule 32 (stmt -> public_stmt .)
    RETURN          reduce using rule 32 (stmt -> public_stmt .)
    IF              reduce using rule 32 (stmt -> public_stmt .)
    {               reduce using rule 32 (stmt -> public_stmt .)
    (               reduce using rule 32 (stmt -> public_stmt .)
    NOT             reduce using rule 32 (stmt -> public_stmt .)
    DECREMENT       reduce using rule 32 (stmt -> public_stmt .)
    INCREMENT       reduce using rule 32 (stmt -> public_stmt .)
    +               reduce using rule 32 (stmt -> public_stmt .)
    !               reduce using rule 32 (stmt -> public_stmt .)
    -               reduce using rule 32 (stmt -> public_stmt .)
    FALSE           reduce using rule 32 (stmt -> public_stmt .)
    TRUE            reduce using rule 32 (stmt -> public_stmt .)
    STRINGLIT       reduce using rule 32 (stmt -> public_stmt .)
    BOOLIT          reduce using rule 32 (stmt -> public_stmt .)
    FLOATLIT        reduce using rule 32 (stmt -> public_stmt .)
    INTLIT          reduce using rule 32 (stmt -> public_stmt .)
    }               reduce using rule 32 (stmt -> public_stmt .)
    ELSE            reduce using rule 32 (stmt -> public_stmt .)


state 141

    (33) stmt -> private_stmt .
    IDENT           reduce using rule 33 (stmt -> private_stmt .)
    SUPER           reduce using rule 33 (stmt -> private_stmt .)
    PUBLIC          reduce using rule 33 (stmt -> private_stmt .)
    PRIVATE         reduce using rule 33 (stmt -> private_stmt .)
    THIS            reduce using rule 33 (stmt -> private_stmt .)
    PRINTF          reduce using rule 33 (stmt -> private_stmt .)
    CONTINUE        reduce using rule 33 (stmt -> private_stmt .)
    BREAK           reduce using rule 33 (stmt -> private_stmt .)
    WHILE           reduce using rule 33 (stmt -> private_stmt .)
    RETURN          reduce using rule 33 (stmt -> private_stmt .)
    IF              reduce using rule 33 (stmt -> private_stmt .)
    {               reduce using rule 33 (stmt -> private_stmt .)
    (               reduce using rule 33 (stmt -> private_stmt .)
    NOT             reduce using rule 33 (stmt -> private_stmt .)
    DECREMENT       reduce using rule 33 (stmt -> private_stmt .)
    INCREMENT       reduce using rule 33 (stmt -> private_stmt .)
    +               reduce using rule 33 (stmt -> private_stmt .)
    !               reduce using rule 33 (stmt -> private_stmt .)
    -               reduce using rule 33 (stmt -> private_stmt .)
    FALSE           reduce using rule 33 (stmt -> private_stmt .)
    TRUE            reduce using rule 33 (stmt -> private_stmt .)
    STRINGLIT       reduce using rule 33 (stmt -> private_stmt .)
    BOOLIT          reduce using rule 33 (stmt -> private_stmt .)
    FLOATLIT        reduce using rule 33 (stmt -> private_stmt .)
    INTLIT          reduce using rule 33 (stmt -> private_stmt .)
    }               reduce using rule 33 (stmt -> private_stmt .)
    ELSE            reduce using rule 33 (stmt -> private_stmt .)


state 142

    (34) stmt -> this_stmt .
    IDENT           reduce using rule 34 (stmt -> this_stmt .)
    SUPER           reduce using rule 34 (stmt -> this_stmt .)
    PUBLIC          reduce using rule 34 (stmt -> this_stmt .)
    PRIVATE         reduce using rule 34 (stmt -> this_stmt .)
    THIS            reduce using rule 34 (stmt -> this_stmt .)
    PRINTF          reduce using rule 34 (stmt -> this_stmt .)
    CONTINUE        reduce using rule 34 (stmt -> this_stmt .)
    BREAK           reduce using rule 34 (stmt -> this_stmt .)
    WHILE           reduce using rule 34 (stmt -> this_stmt .)
    RETURN          reduce using rule 34 (stmt -> this_stmt .)
    IF              reduce using rule 34 (stmt -> this_stmt .)
    {               reduce using rule 34 (stmt -> this_stmt .)
    (               reduce using rule 34 (stmt -> this_stmt .)
    NOT             reduce using rule 34 (stmt -> this_stmt .)
    DECREMENT       reduce using rule 34 (stmt -> this_stmt .)
    INCREMENT       reduce using rule 34 (stmt -> this_stmt .)
    +               reduce using rule 34 (stmt -> this_stmt .)
    !               reduce using rule 34 (stmt -> this_stmt .)
    -               reduce using rule 34 (stmt -> this_stmt .)
    FALSE           reduce using rule 34 (stmt -> this_stmt .)
    TRUE            reduce using rule 34 (stmt -> this_stmt .)
    STRINGLIT       reduce using rule 34 (stmt -> this_stmt .)
    BOOLIT          reduce using rule 34 (stmt -> this_stmt .)
    FLOATLIT        reduce using rule 34 (stmt -> this_stmt .)
    INTLIT          reduce using rule 34 (stmt -> this_stmt .)
    }               reduce using rule 34 (stmt -> this_stmt .)
    ELSE            reduce using rule 34 (stmt -> this_stmt .)


state 143

    (35) stmt -> new_stmt .
    IDENT           reduce using rule 35 (stmt -> new_stmt .)
    SUPER           reduce using rule 35 (stmt -> new_stmt .)
    PUBLIC          reduce using rule 35 (stmt -> new_stmt .)
    PRIVATE         reduce using rule 35 (stmt -> new_stmt .)
    THIS            reduce using rule 35 (stmt -> new_stmt .)
    PRINTF          reduce using rule 35 (stmt -> new_stmt .)
    CONTINUE        reduce using rule 35 (stmt -> new_stmt .)
    BREAK           reduce using rule 35 (stmt -> new_stmt .)
    WHILE           reduce using rule 35 (stmt -> new_stmt .)
    RETURN          reduce using rule 35 (stmt -> new_stmt .)
    IF              reduce using rule 35 (stmt -> new_stmt .)
    {               reduce using rule 35 (stmt -> new_stmt .)
    (               reduce using rule 35 (stmt -> new_stmt .)
    NOT             reduce using rule 35 (stmt -> new_stmt .)
    DECREMENT       reduce using rule 35 (stmt -> new_stmt .)
    INCREMENT       reduce using rule 35 (stmt -> new_stmt .)
    +               reduce using rule 35 (stmt -> new_stmt .)
    !               reduce using rule 35 (stmt -> new_stmt .)
    -               reduce using rule 35 (stmt -> new_stmt .)
    FALSE           reduce using rule 35 (stmt -> new_stmt .)
    TRUE            reduce using rule 35 (stmt -> new_stmt .)
    STRINGLIT       reduce using rule 35 (stmt -> new_stmt .)
    BOOLIT          reduce using rule 35 (stmt -> new_stmt .)
    FLOATLIT        reduce using rule 35 (stmt -> new_stmt .)
    INTLIT          reduce using rule 35 (stmt -> new_stmt .)
    }               reduce using rule 35 (stmt -> new_stmt .)
    ELSE            reduce using rule 35 (stmt -> new_stmt .)


state 144

    (36) stmt -> print_stmt .
    IDENT           reduce using rule 36 (stmt -> print_stmt .)
    SUPER           reduce using rule 36 (stmt -> print_stmt .)
    PUBLIC          reduce using rule 36 (stmt -> print_stmt .)
    PRIVATE         reduce using rule 36 (stmt -> print_stmt .)
    THIS            reduce using rule 36 (stmt -> print_stmt .)
    PRINTF          reduce using rule 36 (stmt -> print_stmt .)
    CONTINUE        reduce using rule 36 (stmt -> print_stmt .)
    BREAK           reduce using rule 36 (stmt -> print_stmt .)
    WHILE           reduce using rule 36 (stmt -> print_stmt .)
    RETURN          reduce using rule 36 (stmt -> print_stmt .)
    IF              reduce using rule 36 (stmt -> print_stmt .)
    {               reduce using rule 36 (stmt -> print_stmt .)
    (               reduce using rule 36 (stmt -> print_stmt .)
    NOT             reduce using rule 36 (stmt -> print_stmt .)
    DECREMENT       reduce using rule 36 (stmt -> print_stmt .)
    INCREMENT       reduce using rule 36 (stmt -> print_stmt .)
    +               reduce using rule 36 (stmt -> print_stmt .)
    !               reduce using rule 36 (stmt -> print_stmt .)
    -               reduce using rule 36 (stmt -> print_stmt .)
    FALSE           reduce using rule 36 (stmt -> print_stmt .)
    TRUE            reduce using rule 36 (stmt -> print_stmt .)
    STRINGLIT       reduce using rule 36 (stmt -> print_stmt .)
    BOOLIT          reduce using rule 36 (stmt -> print_stmt .)
    FLOATLIT        reduce using rule 36 (stmt -> print_stmt .)
    INTLIT          reduce using rule 36 (stmt -> print_stmt .)
    }               reduce using rule 36 (stmt -> print_stmt .)
    ELSE            reduce using rule 36 (stmt -> print_stmt .)


state 145

    (37) stmt -> continue_stmt .
    IDENT           reduce using rule 37 (stmt -> continue_stmt .)
    SUPER           reduce using rule 37 (stmt -> continue_stmt .)
    PUBLIC          reduce using rule 37 (stmt -> continue_stmt .)
    PRIVATE         reduce using rule 37 (stmt -> continue_stmt .)
    THIS            reduce using rule 37 (stmt -> continue_stmt .)
    PRINTF          reduce using rule 37 (stmt -> continue_stmt .)
    CONTINUE        reduce using rule 37 (stmt -> continue_stmt .)
    BREAK           reduce using rule 37 (stmt -> continue_stmt .)
    WHILE           reduce using rule 37 (stmt -> continue_stmt .)
    RETURN          reduce using rule 37 (stmt -> continue_stmt .)
    IF              reduce using rule 37 (stmt -> continue_stmt .)
    {               reduce using rule 37 (stmt -> continue_stmt .)
    (               reduce using rule 37 (stmt -> continue_stmt .)
    NOT             reduce using rule 37 (stmt -> continue_stmt .)
    DECREMENT       reduce using rule 37 (stmt -> continue_stmt .)
    INCREMENT       reduce using rule 37 (stmt -> continue_stmt .)
    +               reduce using rule 37 (stmt -> continue_stmt .)
    !               reduce using rule 37 (stmt -> continue_stmt .)
    -               reduce using rule 37 (stmt -> continue_stmt .)
    FALSE           reduce using rule 37 (stmt -> continue_stmt .)
    TRUE            reduce using rule 37 (stmt -> continue_stmt .)
    STRINGLIT       reduce using rule 37 (stmt -> continue_stmt .)
    BOOLIT          reduce using rule 37 (stmt -> continue_stmt .)
    FLOATLIT        reduce using rule 37 (stmt -> continue_stmt .)
    INTLIT          reduce using rule 37 (stmt -> continue_stmt .)
    }               reduce using rule 37 (stmt -> continue_stmt .)
    ELSE            reduce using rule 37 (stmt -> continue_stmt .)


state 146

    (38) stmt -> break_stmt .
    IDENT           reduce using rule 38 (stmt -> break_stmt .)
    SUPER           reduce using rule 38 (stmt -> break_stmt .)
    PUBLIC          reduce using rule 38 (stmt -> break_stmt .)
    PRIVATE         reduce using rule 38 (stmt -> break_stmt .)
    THIS            reduce using rule 38 (stmt -> break_stmt .)
    PRINTF          reduce using rule 38 (stmt -> break_stmt .)
    CONTINUE        reduce using rule 38 (stmt -> break_stmt .)
    BREAK           reduce using rule 38 (stmt -> break_stmt .)
    WHILE           reduce using rule 38 (stmt -> break_stmt .)
    RETURN          reduce using rule 38 (stmt -> break_stmt .)
    IF              reduce using rule 38 (stmt -> break_stmt .)
    {               reduce using rule 38 (stmt -> break_stmt .)
    (               reduce using rule 38 (stmt -> break_stmt .)
    NOT             reduce using rule 38 (stmt -> break_stmt .)
    DECREMENT       reduce using rule 38 (stmt -> break_stmt .)
    INCREMENT       reduce using rule 38 (stmt -> break_stmt .)
    +               reduce using rule 38 (stmt -> break_stmt .)
    !               reduce using rule 38 (stmt -> break_stmt .)
    -               reduce using rule 38 (stmt -> break_stmt .)
    FALSE           reduce using rule 38 (stmt -> break_stmt .)
    TRUE            reduce using rule 38 (stmt -> break_stmt .)
    STRINGLIT       reduce using rule 38 (stmt -> break_stmt .)
    BOOLIT          reduce using rule 38 (stmt -> break_stmt .)
    FLOATLIT        reduce using rule 38 (stmt -> break_stmt .)
    INTLIT          reduce using rule 38 (stmt -> break_stmt .)
    }               reduce using rule 38 (stmt -> break_stmt .)
    ELSE            reduce using rule 38 (stmt -> break_stmt .)


state 147

    (39) stmt -> while_stmt .
    IDENT           reduce using rule 39 (stmt -> while_stmt .)
    SUPER           reduce using rule 39 (stmt -> while_stmt .)
    PUBLIC          reduce using rule 39 (stmt -> while_stmt .)
    PRIVATE         reduce using rule 39 (stmt -> while_stmt .)
    THIS            reduce using rule 39 (stmt -> while_stmt .)
    PRINTF          reduce using rule 39 (stmt -> while_stmt .)
    CONTINUE        reduce using rule 39 (stmt -> while_stmt .)
    BREAK           reduce using rule 39 (stmt -> while_stmt .)
    WHILE           reduce using rule 39 (stmt -> while_stmt .)
    RETURN          reduce using rule 39 (stmt -> while_stmt .)
    IF              reduce using rule 39 (stmt -> while_stmt .)
    {               reduce using rule 39 (stmt -> while_stmt .)
    (               reduce using rule 39 (stmt -> while_stmt .)
    NOT             reduce using rule 39 (stmt -> while_stmt .)
    DECREMENT       reduce using rule 39 (stmt -> while_stmt .)
    INCREMENT       reduce using rule 39 (stmt -> while_stmt .)
    +               reduce using rule 39 (stmt -> while_stmt .)
    !               reduce using rule 39 (stmt -> while_stmt .)
    -               reduce using rule 39 (stmt -> while_stmt .)
    FALSE           reduce using rule 39 (stmt -> while_stmt .)
    TRUE            reduce using rule 39 (stmt -> while_stmt .)
    STRINGLIT       reduce using rule 39 (stmt -> while_stmt .)
    BOOLIT          reduce using rule 39 (stmt -> while_stmt .)
    FLOATLIT        reduce using rule 39 (stmt -> while_stmt .)
    INTLIT          reduce using rule 39 (stmt -> while_stmt .)
    }               reduce using rule 39 (stmt -> while_stmt .)
    ELSE            reduce using rule 39 (stmt -> while_stmt .)


state 148

    (40) stmt -> return_stmt .
    IDENT           reduce using rule 40 (stmt -> return_stmt .)
    SUPER           reduce using rule 40 (stmt -> return_stmt .)
    PUBLIC          reduce using rule 40 (stmt -> return_stmt .)
    PRIVATE         reduce using rule 40 (stmt -> return_stmt .)
    THIS            reduce using rule 40 (stmt -> return_stmt .)
    PRINTF          reduce using rule 40 (stmt -> return_stmt .)
    CONTINUE        reduce using rule 40 (stmt -> return_stmt .)
    BREAK           reduce using rule 40 (stmt -> return_stmt .)
    WHILE           reduce using rule 40 (stmt -> return_stmt .)
    RETURN          reduce using rule 40 (stmt -> return_stmt .)
    IF              reduce using rule 40 (stmt -> return_stmt .)
    {               reduce using rule 40 (stmt -> return_stmt .)
    (               reduce using rule 40 (stmt -> return_stmt .)
    NOT             reduce using rule 40 (stmt -> return_stmt .)
    DECREMENT       reduce using rule 40 (stmt -> return_stmt .)
    INCREMENT       reduce using rule 40 (stmt -> return_stmt .)
    +               reduce using rule 40 (stmt -> return_stmt .)
    !               reduce using rule 40 (stmt -> return_stmt .)
    -               reduce using rule 40 (stmt -> return_stmt .)
    FALSE           reduce using rule 40 (stmt -> return_stmt .)
    TRUE            reduce using rule 40 (stmt -> return_stmt .)
    STRINGLIT       reduce using rule 40 (stmt -> return_stmt .)
    BOOLIT          reduce using rule 40 (stmt -> return_stmt .)
    FLOATLIT        reduce using rule 40 (stmt -> return_stmt .)
    INTLIT          reduce using rule 40 (stmt -> return_stmt .)
    }               reduce using rule 40 (stmt -> return_stmt .)
    ELSE            reduce using rule 40 (stmt -> return_stmt .)


state 149

    (41) stmt -> if_stmt .
    IDENT           reduce using rule 41 (stmt -> if_stmt .)
    SUPER           reduce using rule 41 (stmt -> if_stmt .)
    PUBLIC          reduce using rule 41 (stmt -> if_stmt .)
    PRIVATE         reduce using rule 41 (stmt -> if_stmt .)
    THIS            reduce using rule 41 (stmt -> if_stmt .)
    PRINTF          reduce using rule 41 (stmt -> if_stmt .)
    CONTINUE        reduce using rule 41 (stmt -> if_stmt .)
    BREAK           reduce using rule 41 (stmt -> if_stmt .)
    WHILE           reduce using rule 41 (stmt -> if_stmt .)
    RETURN          reduce using rule 41 (stmt -> if_stmt .)
    IF              reduce using rule 41 (stmt -> if_stmt .)
    {               reduce using rule 41 (stmt -> if_stmt .)
    (               reduce using rule 41 (stmt -> if_stmt .)
    NOT             reduce using rule 41 (stmt -> if_stmt .)
    DECREMENT       reduce using rule 41 (stmt -> if_stmt .)
    INCREMENT       reduce using rule 41 (stmt -> if_stmt .)
    +               reduce using rule 41 (stmt -> if_stmt .)
    !               reduce using rule 41 (stmt -> if_stmt .)
    -               reduce using rule 41 (stmt -> if_stmt .)
    FALSE           reduce using rule 41 (stmt -> if_stmt .)
    TRUE            reduce using rule 41 (stmt -> if_stmt .)
    STRINGLIT       reduce using rule 41 (stmt -> if_stmt .)
    BOOLIT          reduce using rule 41 (stmt -> if_stmt .)
    FLOATLIT        reduce using rule 41 (stmt -> if_stmt .)
    INTLIT          reduce using rule 41 (stmt -> if_stmt .)
    }               reduce using rule 41 (stmt -> if_stmt .)
    ELSE            reduce using rule 41 (stmt -> if_stmt .)


state 150

    (42) stmt -> compound_stmt .
    IDENT           reduce using rule 42 (stmt -> compound_stmt .)
    SUPER           reduce using rule 42 (stmt -> compound_stmt .)
    PUBLIC          reduce using rule 42 (stmt -> compound_stmt .)
    PRIVATE         reduce using rule 42 (stmt -> compound_stmt .)
    THIS            reduce using rule 42 (stmt -> compound_stmt .)
    PRINTF          reduce using rule 42 (stmt -> compound_stmt .)
    CONTINUE        reduce using rule 42 (stmt -> compound_stmt .)
    BREAK           reduce using rule 42 (stmt -> compound_stmt .)
    WHILE           reduce using rule 42 (stmt -> compound_stmt .)
    RETURN          reduce using rule 42 (stmt -> compound_stmt .)
    IF              reduce using rule 42 (stmt -> compound_stmt .)
    {               reduce using rule 42 (stmt -> compound_stmt .)
    (               reduce using rule 42 (stmt -> compound_stmt .)
    NOT             reduce using rule 42 (stmt -> compound_stmt .)
    DECREMENT       reduce using rule 42 (stmt -> compound_stmt .)
    INCREMENT       reduce using rule 42 (stmt -> compound_stmt .)
    +               reduce using rule 42 (stmt -> compound_stmt .)
    !               reduce using rule 42 (stmt -> compound_stmt .)
    -               reduce using rule 42 (stmt -> compound_stmt .)
    FALSE           reduce using rule 42 (stmt -> compound_stmt .)
    TRUE            reduce using rule 42 (stmt -> compound_stmt .)
    STRINGLIT       reduce using rule 42 (stmt -> compound_stmt .)
    BOOLIT          reduce using rule 42 (stmt -> compound_stmt .)
    FLOATLIT        reduce using rule 42 (stmt -> compound_stmt .)
    INTLIT          reduce using rule 42 (stmt -> compound_stmt .)
    }               reduce using rule 42 (stmt -> compound_stmt .)
    ELSE            reduce using rule 42 (stmt -> compound_stmt .)


state 151

    (43) stmt -> expr_stmt .
    IDENT           reduce using rule 43 (stmt -> expr_stmt .)
    SUPER           reduce using rule 43 (stmt -> expr_stmt .)
    PUBLIC          reduce using rule 43 (stmt -> expr_stmt .)
    PRIVATE         reduce using rule 43 (stmt -> expr_stmt .)
    THIS            reduce using rule 43 (stmt -> expr_stmt .)
    PRINTF          reduce using rule 43 (stmt -> expr_stmt .)
    CONTINUE        reduce using rule 43 (stmt -> expr_stmt .)
    BREAK           reduce using rule 43 (stmt -> expr_stmt .)
    WHILE           reduce using rule 43 (stmt -> expr_stmt .)
    RETURN          reduce using rule 43 (stmt -> expr_stmt .)
    IF              reduce using rule 43 (stmt -> expr_stmt .)
    {               reduce using rule 43 (stmt -> expr_stmt .)
    (               reduce using rule 43 (stmt -> expr_stmt .)
    NOT             reduce using rule 43 (stmt -> expr_stmt .)
    DECREMENT       reduce using rule 43 (stmt -> expr_stmt .)
    INCREMENT       reduce using rule 43 (stmt -> expr_stmt .)
    +               reduce using rule 43 (stmt -> expr_stmt .)
    !               reduce using rule 43 (stmt -> expr_stmt .)
    -               reduce using rule 43 (stmt -> expr_stmt .)
    FALSE           reduce using rule 43 (stmt -> expr_stmt .)
    TRUE            reduce using rule 43 (stmt -> expr_stmt .)
    STRINGLIT       reduce using rule 43 (stmt -> expr_stmt .)
    BOOLIT          reduce using rule 43 (stmt -> expr_stmt .)
    FLOATLIT        reduce using rule 43 (stmt -> expr_stmt .)
    INTLIT          reduce using rule 43 (stmt -> expr_stmt .)
    }               reduce using rule 43 (stmt -> expr_stmt .)
    ELSE            reduce using rule 43 (stmt -> expr_stmt .)


state 152

    (64) var_decl_instance -> IDENT . IDENT ;
    (55) new_stmt -> IDENT . = NEW IDENT ( args_list ) ;
    (70) expr -> IDENT . . SIZE
    (91) expr -> IDENT . . IDENT ( args_list )
    (92) expr -> IDENT .
    (93) expr -> IDENT . ( args_list )
    (94) expr -> IDENT . [ expr ]
    (95) expr -> IDENT . [ expr ] = expr
    (96) expr -> IDENT . = expr
    IDENT           shift and go to state 17
    =               shift and go to state 172
    .               shift and go to state 67
    ;               reduce using rule 92 (expr -> IDENT .)
    %               reduce using rule 92 (expr -> IDENT .)
    /               reduce using rule 92 (expr -> IDENT .)
    *               reduce using rule 92 (expr -> IDENT .)
    -               reduce using rule 92 (expr -> IDENT .)
    +               reduce using rule 92 (expr -> IDENT .)
    GE              reduce using rule 92 (expr -> IDENT .)
    GT              reduce using rule 92 (expr -> IDENT .)
    LE              reduce using rule 92 (expr -> IDENT .)
    LT              reduce using rule 92 (expr -> IDENT .)
    NE              reduce using rule 92 (expr -> IDENT .)
    EQ              reduce using rule 92 (expr -> IDENT .)
    AND             reduce using rule 92 (expr -> IDENT .)
    OR              reduce using rule 92 (expr -> IDENT .)
    (               shift and go to state 68
    [               shift and go to state 69


state 153

    (44) super_stmt -> SUPER . ( args_list ) ;
    (               shift and go to state 173


state 154

    (49) public_stmt -> PUBLIC . : stmt
    :               shift and go to state 174


state 155

    (48) private_stmt -> PRIVATE . : stmt
    :               shift and go to state 175


state 156

    (60) this_stmt -> THIS . ;
    ;               shift and go to state 176


state 157

    (59) print_stmt -> PRINTF . ( expr ) ;
    (               shift and go to state 177


state 158

    (45) expr_stmt -> expr . ;
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               shift and go to state 178
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 159

    (54) continue_stmt -> CONTINUE . ;
    ;               shift and go to state 179


state 160

    (53) break_stmt -> BREAK . ;
    ;               shift and go to state 180


state 161

    (52) while_stmt -> WHILE . ( expr ) stmt
    (               shift and go to state 181


state 162

    (50) return_stmt -> RETURN . expr ;
    (51) return_stmt -> RETURN . ;
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    ;               shift and go to state 183
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 182

state 163

    (46) if_stmt -> IF . ( expr ) stmt ELSE stmt
    (47) if_stmt -> IF . ( expr ) stmt
    (               shift and go to state 184


state 164

    (27) local_decls -> var_decl local_decls .
    IDENT           reduce using rule 27 (local_decls -> var_decl local_decls .)
    SUPER           reduce using rule 27 (local_decls -> var_decl local_decls .)
    PUBLIC          reduce using rule 27 (local_decls -> var_decl local_decls .)
    PRIVATE         reduce using rule 27 (local_decls -> var_decl local_decls .)
    THIS            reduce using rule 27 (local_decls -> var_decl local_decls .)
    PRINTF          reduce using rule 27 (local_decls -> var_decl local_decls .)
    CONTINUE        reduce using rule 27 (local_decls -> var_decl local_decls .)
    BREAK           reduce using rule 27 (local_decls -> var_decl local_decls .)
    WHILE           reduce using rule 27 (local_decls -> var_decl local_decls .)
    RETURN          reduce using rule 27 (local_decls -> var_decl local_decls .)
    IF              reduce using rule 27 (local_decls -> var_decl local_decls .)
    {               reduce using rule 27 (local_decls -> var_decl local_decls .)
    (               reduce using rule 27 (local_decls -> var_decl local_decls .)
    NOT             reduce using rule 27 (local_decls -> var_decl local_decls .)
    DECREMENT       reduce using rule 27 (local_decls -> var_decl local_decls .)
    INCREMENT       reduce using rule 27 (local_decls -> var_decl local_decls .)
    +               reduce using rule 27 (local_decls -> var_decl local_decls .)
    !               reduce using rule 27 (local_decls -> var_decl local_decls .)
    -               reduce using rule 27 (local_decls -> var_decl local_decls .)
    FALSE           reduce using rule 27 (local_decls -> var_decl local_decls .)
    TRUE            reduce using rule 27 (local_decls -> var_decl local_decls .)
    STRINGLIT       reduce using rule 27 (local_decls -> var_decl local_decls .)
    BOOLIT          reduce using rule 27 (local_decls -> var_decl local_decls .)
    FLOATLIT        reduce using rule 27 (local_decls -> var_decl local_decls .)
    INTLIT          reduce using rule 27 (local_decls -> var_decl local_decls .)
    }               reduce using rule 27 (local_decls -> var_decl local_decls .)


state 165

    (61) var_decl -> type_spec IDENT . [ INTLIT ] ;
    (62) var_decl -> type_spec IDENT . = expr ;
    (63) var_decl -> type_spec IDENT . ;
    [               shift and go to state 23
    =               shift and go to state 25
    ;               shift and go to state 24


state 166

    (91) expr -> IDENT . IDENT ( args_list . )
    (56) args_list -> args_list . , expr
    )               shift and go to state 185
    ,               shift and go to state 130


state 167

    (56) args_list -> args_list , expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    )               reduce using rule 56 (args_list -> args_list , expr .)
    ,               reduce using rule 56 (args_list -> args_list , expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 168

    (95) expr -> IDENT [ expr ] = . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 186

state 169

    (17) method_decl -> type_spec IDENT ( param_list ) compound_stmt .
    PUBLIC          reduce using rule 17 (method_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    PRIVATE         reduce using rule 17 (method_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    IDENT           reduce using rule 17 (method_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    STRING          reduce using rule 17 (method_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    BOOL            reduce using rule 17 (method_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    FLOAT           reduce using rule 17 (method_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    INT             reduce using rule 17 (method_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    VOID            reduce using rule 17 (method_decl -> type_spec IDENT ( param_list ) compound_stmt .)
    }               reduce using rule 17 (method_decl -> type_spec IDENT ( param_list ) compound_stmt .)


state 170

    (25) compound_stmt -> { local_decls stmt_list } .
    IDENT           reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    CLASS           reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    STRING          reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    BOOL            reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    FLOAT           reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    INT             reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    VOID            reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    $end            reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    PUBLIC          reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    PRIVATE         reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    }               reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    SUPER           reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    THIS            reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    PRINTF          reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    CONTINUE        reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    BREAK           reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    WHILE           reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    RETURN          reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    IF              reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    {               reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    (               reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    NOT             reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    DECREMENT       reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    INCREMENT       reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    +               reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    !               reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    -               reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    FALSE           reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    TRUE            reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    STRINGLIT       reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    BOOLIT          reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    FLOATLIT        reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    INTLIT          reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)
    ELSE            reduce using rule 25 (compound_stmt -> { local_decls stmt_list } .)


state 171

    (28) stmt_list -> stmt stmt_list .
    }               reduce using rule 28 (stmt_list -> stmt stmt_list .)


state 172

    (55) new_stmt -> IDENT = . NEW IDENT ( args_list ) ;
    (96) expr -> IDENT = . expr
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    NEW             shift and go to state 187
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 106

state 173

    (44) super_stmt -> SUPER ( . args_list ) ;
    (56) args_list -> . args_list , expr
    (57) args_list -> . expr
    (58) args_list -> . empty
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    (103) empty -> .
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55
    )               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)

    args_list                      shift and go to state 188
    expr                           shift and go to state 103
    empty                          shift and go to state 104

state 174

    (49) public_stmt -> PUBLIC : . stmt
    (30) stmt -> . var_decl_instance
    (31) stmt -> . super_stmt
    (32) stmt -> . public_stmt
    (33) stmt -> . private_stmt
    (34) stmt -> . this_stmt
    (35) stmt -> . new_stmt
    (36) stmt -> . print_stmt
    (37) stmt -> . continue_stmt
    (38) stmt -> . break_stmt
    (39) stmt -> . while_stmt
    (40) stmt -> . return_stmt
    (41) stmt -> . if_stmt
    (42) stmt -> . compound_stmt
    (43) stmt -> . expr_stmt
    (64) var_decl_instance -> . IDENT IDENT ;
    (44) super_stmt -> . SUPER ( args_list ) ;
    (49) public_stmt -> . PUBLIC : stmt
    (48) private_stmt -> . PRIVATE : stmt
    (60) this_stmt -> . THIS ;
    (55) new_stmt -> . IDENT = NEW IDENT ( args_list ) ;
    (59) print_stmt -> . PRINTF ( expr ) ;
    (54) continue_stmt -> . CONTINUE ;
    (53) break_stmt -> . BREAK ;
    (52) while_stmt -> . WHILE ( expr ) stmt
    (50) return_stmt -> . RETURN expr ;
    (51) return_stmt -> . RETURN ;
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (25) compound_stmt -> . { local_decls stmt_list }
    (45) expr_stmt -> . expr ;
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 152
    SUPER           shift and go to state 153
    PUBLIC          shift and go to state 154
    PRIVATE         shift and go to state 155
    THIS            shift and go to state 156
    PRINTF          shift and go to state 157
    CONTINUE        shift and go to state 159
    BREAK           shift and go to state 160
    WHILE           shift and go to state 161
    RETURN          shift and go to state 162
    IF              shift and go to state 163
    {               shift and go to state 97
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    stmt                           shift and go to state 189
    var_decl_instance              shift and go to state 138
    super_stmt                     shift and go to state 139
    public_stmt                    shift and go to state 140
    private_stmt                   shift and go to state 141
    this_stmt                      shift and go to state 142
    new_stmt                       shift and go to state 143
    print_stmt                     shift and go to state 144
    continue_stmt                  shift and go to state 145
    break_stmt                     shift and go to state 146
    while_stmt                     shift and go to state 147
    return_stmt                    shift and go to state 148
    if_stmt                        shift and go to state 149
    compound_stmt                  shift and go to state 150
    expr_stmt                      shift and go to state 151
    expr                           shift and go to state 158

state 175

    (48) private_stmt -> PRIVATE : . stmt
    (30) stmt -> . var_decl_instance
    (31) stmt -> . super_stmt
    (32) stmt -> . public_stmt
    (33) stmt -> . private_stmt
    (34) stmt -> . this_stmt
    (35) stmt -> . new_stmt
    (36) stmt -> . print_stmt
    (37) stmt -> . continue_stmt
    (38) stmt -> . break_stmt
    (39) stmt -> . while_stmt
    (40) stmt -> . return_stmt
    (41) stmt -> . if_stmt
    (42) stmt -> . compound_stmt
    (43) stmt -> . expr_stmt
    (64) var_decl_instance -> . IDENT IDENT ;
    (44) super_stmt -> . SUPER ( args_list ) ;
    (49) public_stmt -> . PUBLIC : stmt
    (48) private_stmt -> . PRIVATE : stmt
    (60) this_stmt -> . THIS ;
    (55) new_stmt -> . IDENT = NEW IDENT ( args_list ) ;
    (59) print_stmt -> . PRINTF ( expr ) ;
    (54) continue_stmt -> . CONTINUE ;
    (53) break_stmt -> . BREAK ;
    (52) while_stmt -> . WHILE ( expr ) stmt
    (50) return_stmt -> . RETURN expr ;
    (51) return_stmt -> . RETURN ;
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (25) compound_stmt -> . { local_decls stmt_list }
    (45) expr_stmt -> . expr ;
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 152
    SUPER           shift and go to state 153
    PUBLIC          shift and go to state 154
    PRIVATE         shift and go to state 155
    THIS            shift and go to state 156
    PRINTF          shift and go to state 157
    CONTINUE        shift and go to state 159
    BREAK           shift and go to state 160
    WHILE           shift and go to state 161
    RETURN          shift and go to state 162
    IF              shift and go to state 163
    {               shift and go to state 97
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    stmt                           shift and go to state 190
    var_decl_instance              shift and go to state 138
    super_stmt                     shift and go to state 139
    public_stmt                    shift and go to state 140
    private_stmt                   shift and go to state 141
    this_stmt                      shift and go to state 142
    new_stmt                       shift and go to state 143
    print_stmt                     shift and go to state 144
    continue_stmt                  shift and go to state 145
    break_stmt                     shift and go to state 146
    while_stmt                     shift and go to state 147
    return_stmt                    shift and go to state 148
    if_stmt                        shift and go to state 149
    compound_stmt                  shift and go to state 150
    expr_stmt                      shift and go to state 151
    expr                           shift and go to state 158

state 176

    (60) this_stmt -> THIS ; .
    IDENT           reduce using rule 60 (this_stmt -> THIS ; .)
    SUPER           reduce using rule 60 (this_stmt -> THIS ; .)
    PUBLIC          reduce using rule 60 (this_stmt -> THIS ; .)
    PRIVATE         reduce using rule 60 (this_stmt -> THIS ; .)
    THIS            reduce using rule 60 (this_stmt -> THIS ; .)
    PRINTF          reduce using rule 60 (this_stmt -> THIS ; .)
    CONTINUE        reduce using rule 60 (this_stmt -> THIS ; .)
    BREAK           reduce using rule 60 (this_stmt -> THIS ; .)
    WHILE           reduce using rule 60 (this_stmt -> THIS ; .)
    RETURN          reduce using rule 60 (this_stmt -> THIS ; .)
    IF              reduce using rule 60 (this_stmt -> THIS ; .)
    {               reduce using rule 60 (this_stmt -> THIS ; .)
    (               reduce using rule 60 (this_stmt -> THIS ; .)
    NOT             reduce using rule 60 (this_stmt -> THIS ; .)
    DECREMENT       reduce using rule 60 (this_stmt -> THIS ; .)
    INCREMENT       reduce using rule 60 (this_stmt -> THIS ; .)
    +               reduce using rule 60 (this_stmt -> THIS ; .)
    !               reduce using rule 60 (this_stmt -> THIS ; .)
    -               reduce using rule 60 (this_stmt -> THIS ; .)
    FALSE           reduce using rule 60 (this_stmt -> THIS ; .)
    TRUE            reduce using rule 60 (this_stmt -> THIS ; .)
    STRINGLIT       reduce using rule 60 (this_stmt -> THIS ; .)
    BOOLIT          reduce using rule 60 (this_stmt -> THIS ; .)
    FLOATLIT        reduce using rule 60 (this_stmt -> THIS ; .)
    INTLIT          reduce using rule 60 (this_stmt -> THIS ; .)
    }               reduce using rule 60 (this_stmt -> THIS ; .)
    ELSE            reduce using rule 60 (this_stmt -> THIS ; .)


state 177

    (59) print_stmt -> PRINTF ( . expr ) ;
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 191

state 178

    (45) expr_stmt -> expr ; .
    IDENT           reduce using rule 45 (expr_stmt -> expr ; .)
    SUPER           reduce using rule 45 (expr_stmt -> expr ; .)
    PUBLIC          reduce using rule 45 (expr_stmt -> expr ; .)
    PRIVATE         reduce using rule 45 (expr_stmt -> expr ; .)
    THIS            reduce using rule 45 (expr_stmt -> expr ; .)
    PRINTF          reduce using rule 45 (expr_stmt -> expr ; .)
    CONTINUE        reduce using rule 45 (expr_stmt -> expr ; .)
    BREAK           reduce using rule 45 (expr_stmt -> expr ; .)
    WHILE           reduce using rule 45 (expr_stmt -> expr ; .)
    RETURN          reduce using rule 45 (expr_stmt -> expr ; .)
    IF              reduce using rule 45 (expr_stmt -> expr ; .)
    {               reduce using rule 45 (expr_stmt -> expr ; .)
    (               reduce using rule 45 (expr_stmt -> expr ; .)
    NOT             reduce using rule 45 (expr_stmt -> expr ; .)
    DECREMENT       reduce using rule 45 (expr_stmt -> expr ; .)
    INCREMENT       reduce using rule 45 (expr_stmt -> expr ; .)
    +               reduce using rule 45 (expr_stmt -> expr ; .)
    !               reduce using rule 45 (expr_stmt -> expr ; .)
    -               reduce using rule 45 (expr_stmt -> expr ; .)
    FALSE           reduce using rule 45 (expr_stmt -> expr ; .)
    TRUE            reduce using rule 45 (expr_stmt -> expr ; .)
    STRINGLIT       reduce using rule 45 (expr_stmt -> expr ; .)
    BOOLIT          reduce using rule 45 (expr_stmt -> expr ; .)
    FLOATLIT        reduce using rule 45 (expr_stmt -> expr ; .)
    INTLIT          reduce using rule 45 (expr_stmt -> expr ; .)
    }               reduce using rule 45 (expr_stmt -> expr ; .)
    ELSE            reduce using rule 45 (expr_stmt -> expr ; .)


state 179

    (54) continue_stmt -> CONTINUE ; .
    IDENT           reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    SUPER           reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    PUBLIC          reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    PRIVATE         reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    THIS            reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    PRINTF          reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    CONTINUE        reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    BREAK           reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    WHILE           reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    RETURN          reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    IF              reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    {               reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    (               reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    NOT             reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    DECREMENT       reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    INCREMENT       reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    +               reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    !               reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    -               reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    FALSE           reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    TRUE            reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    STRINGLIT       reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    BOOLIT          reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    FLOATLIT        reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    INTLIT          reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    }               reduce using rule 54 (continue_stmt -> CONTINUE ; .)
    ELSE            reduce using rule 54 (continue_stmt -> CONTINUE ; .)


state 180

    (53) break_stmt -> BREAK ; .
    IDENT           reduce using rule 53 (break_stmt -> BREAK ; .)
    SUPER           reduce using rule 53 (break_stmt -> BREAK ; .)
    PUBLIC          reduce using rule 53 (break_stmt -> BREAK ; .)
    PRIVATE         reduce using rule 53 (break_stmt -> BREAK ; .)
    THIS            reduce using rule 53 (break_stmt -> BREAK ; .)
    PRINTF          reduce using rule 53 (break_stmt -> BREAK ; .)
    CONTINUE        reduce using rule 53 (break_stmt -> BREAK ; .)
    BREAK           reduce using rule 53 (break_stmt -> BREAK ; .)
    WHILE           reduce using rule 53 (break_stmt -> BREAK ; .)
    RETURN          reduce using rule 53 (break_stmt -> BREAK ; .)
    IF              reduce using rule 53 (break_stmt -> BREAK ; .)
    {               reduce using rule 53 (break_stmt -> BREAK ; .)
    (               reduce using rule 53 (break_stmt -> BREAK ; .)
    NOT             reduce using rule 53 (break_stmt -> BREAK ; .)
    DECREMENT       reduce using rule 53 (break_stmt -> BREAK ; .)
    INCREMENT       reduce using rule 53 (break_stmt -> BREAK ; .)
    +               reduce using rule 53 (break_stmt -> BREAK ; .)
    !               reduce using rule 53 (break_stmt -> BREAK ; .)
    -               reduce using rule 53 (break_stmt -> BREAK ; .)
    FALSE           reduce using rule 53 (break_stmt -> BREAK ; .)
    TRUE            reduce using rule 53 (break_stmt -> BREAK ; .)
    STRINGLIT       reduce using rule 53 (break_stmt -> BREAK ; .)
    BOOLIT          reduce using rule 53 (break_stmt -> BREAK ; .)
    FLOATLIT        reduce using rule 53 (break_stmt -> BREAK ; .)
    INTLIT          reduce using rule 53 (break_stmt -> BREAK ; .)
    }               reduce using rule 53 (break_stmt -> BREAK ; .)
    ELSE            reduce using rule 53 (break_stmt -> BREAK ; .)


state 181

    (52) while_stmt -> WHILE ( . expr ) stmt
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 192

state 182

    (50) return_stmt -> RETURN expr . ;
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               shift and go to state 193
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 183

    (51) return_stmt -> RETURN ; .
    IDENT           reduce using rule 51 (return_stmt -> RETURN ; .)
    SUPER           reduce using rule 51 (return_stmt -> RETURN ; .)
    PUBLIC          reduce using rule 51 (return_stmt -> RETURN ; .)
    PRIVATE         reduce using rule 51 (return_stmt -> RETURN ; .)
    THIS            reduce using rule 51 (return_stmt -> RETURN ; .)
    PRINTF          reduce using rule 51 (return_stmt -> RETURN ; .)
    CONTINUE        reduce using rule 51 (return_stmt -> RETURN ; .)
    BREAK           reduce using rule 51 (return_stmt -> RETURN ; .)
    WHILE           reduce using rule 51 (return_stmt -> RETURN ; .)
    RETURN          reduce using rule 51 (return_stmt -> RETURN ; .)
    IF              reduce using rule 51 (return_stmt -> RETURN ; .)
    {               reduce using rule 51 (return_stmt -> RETURN ; .)
    (               reduce using rule 51 (return_stmt -> RETURN ; .)
    NOT             reduce using rule 51 (return_stmt -> RETURN ; .)
    DECREMENT       reduce using rule 51 (return_stmt -> RETURN ; .)
    INCREMENT       reduce using rule 51 (return_stmt -> RETURN ; .)
    +               reduce using rule 51 (return_stmt -> RETURN ; .)
    !               reduce using rule 51 (return_stmt -> RETURN ; .)
    -               reduce using rule 51 (return_stmt -> RETURN ; .)
    FALSE           reduce using rule 51 (return_stmt -> RETURN ; .)
    TRUE            reduce using rule 51 (return_stmt -> RETURN ; .)
    STRINGLIT       reduce using rule 51 (return_stmt -> RETURN ; .)
    BOOLIT          reduce using rule 51 (return_stmt -> RETURN ; .)
    FLOATLIT        reduce using rule 51 (return_stmt -> RETURN ; .)
    INTLIT          reduce using rule 51 (return_stmt -> RETURN ; .)
    }               reduce using rule 51 (return_stmt -> RETURN ; .)
    ELSE            reduce using rule 51 (return_stmt -> RETURN ; .)


state 184

    (46) if_stmt -> IF ( . expr ) stmt ELSE stmt
    (47) if_stmt -> IF ( . expr ) stmt
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 194

state 185

    (91) expr -> IDENT . IDENT ( args_list ) .
    ;               reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    %               reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    /               reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    *               reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    -               reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    +               reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    GE              reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    GT              reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    LE              reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    LT              reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    NE              reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    EQ              reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    AND             reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    OR              reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    )               reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    ,               reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)
    ]               reduce using rule 91 (expr -> IDENT . IDENT ( args_list ) .)


state 186

    (95) expr -> IDENT [ expr ] = expr .
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    ;               reduce using rule 95 (expr -> IDENT [ expr ] = expr .)
    )               reduce using rule 95 (expr -> IDENT [ expr ] = expr .)
    ,               reduce using rule 95 (expr -> IDENT [ expr ] = expr .)
    ]               reduce using rule 95 (expr -> IDENT [ expr ] = expr .)
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 187

    (55) new_stmt -> IDENT = NEW . IDENT ( args_list ) ;
    IDENT           shift and go to state 195


state 188

    (44) super_stmt -> SUPER ( args_list . ) ;
    (56) args_list -> args_list . , expr
    )               shift and go to state 196
    ,               shift and go to state 130


state 189

    (49) public_stmt -> PUBLIC : stmt .
    IDENT           reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    SUPER           reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    PUBLIC          reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    PRIVATE         reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    THIS            reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    PRINTF          reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    CONTINUE        reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    BREAK           reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    WHILE           reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    RETURN          reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    IF              reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    {               reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    (               reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    NOT             reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    DECREMENT       reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    INCREMENT       reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    +               reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    !               reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    -               reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    FALSE           reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    TRUE            reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    STRINGLIT       reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    BOOLIT          reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    FLOATLIT        reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    INTLIT          reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    }               reduce using rule 49 (public_stmt -> PUBLIC : stmt .)
    ELSE            reduce using rule 49 (public_stmt -> PUBLIC : stmt .)


state 190

    (48) private_stmt -> PRIVATE : stmt .
    IDENT           reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    SUPER           reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    PUBLIC          reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    PRIVATE         reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    THIS            reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    PRINTF          reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    CONTINUE        reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    BREAK           reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    WHILE           reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    RETURN          reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    IF              reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    {               reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    (               reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    NOT             reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    DECREMENT       reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    INCREMENT       reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    +               reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    !               reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    -               reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    FALSE           reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    TRUE            reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    STRINGLIT       reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    BOOLIT          reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    FLOATLIT        reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    INTLIT          reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    }               reduce using rule 48 (private_stmt -> PRIVATE : stmt .)
    ELSE            reduce using rule 48 (private_stmt -> PRIVATE : stmt .)


state 191

    (59) print_stmt -> PRINTF ( expr . ) ;
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    )               shift and go to state 197
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 192

    (52) while_stmt -> WHILE ( expr . ) stmt
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    )               shift and go to state 198
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 193

    (50) return_stmt -> RETURN expr ; .
    IDENT           reduce using rule 50 (return_stmt -> RETURN expr ; .)
    SUPER           reduce using rule 50 (return_stmt -> RETURN expr ; .)
    PUBLIC          reduce using rule 50 (return_stmt -> RETURN expr ; .)
    PRIVATE         reduce using rule 50 (return_stmt -> RETURN expr ; .)
    THIS            reduce using rule 50 (return_stmt -> RETURN expr ; .)
    PRINTF          reduce using rule 50 (return_stmt -> RETURN expr ; .)
    CONTINUE        reduce using rule 50 (return_stmt -> RETURN expr ; .)
    BREAK           reduce using rule 50 (return_stmt -> RETURN expr ; .)
    WHILE           reduce using rule 50 (return_stmt -> RETURN expr ; .)
    RETURN          reduce using rule 50 (return_stmt -> RETURN expr ; .)
    IF              reduce using rule 50 (return_stmt -> RETURN expr ; .)
    {               reduce using rule 50 (return_stmt -> RETURN expr ; .)
    (               reduce using rule 50 (return_stmt -> RETURN expr ; .)
    NOT             reduce using rule 50 (return_stmt -> RETURN expr ; .)
    DECREMENT       reduce using rule 50 (return_stmt -> RETURN expr ; .)
    INCREMENT       reduce using rule 50 (return_stmt -> RETURN expr ; .)
    +               reduce using rule 50 (return_stmt -> RETURN expr ; .)
    !               reduce using rule 50 (return_stmt -> RETURN expr ; .)
    -               reduce using rule 50 (return_stmt -> RETURN expr ; .)
    FALSE           reduce using rule 50 (return_stmt -> RETURN expr ; .)
    TRUE            reduce using rule 50 (return_stmt -> RETURN expr ; .)
    STRINGLIT       reduce using rule 50 (return_stmt -> RETURN expr ; .)
    BOOLIT          reduce using rule 50 (return_stmt -> RETURN expr ; .)
    FLOATLIT        reduce using rule 50 (return_stmt -> RETURN expr ; .)
    INTLIT          reduce using rule 50 (return_stmt -> RETURN expr ; .)
    }               reduce using rule 50 (return_stmt -> RETURN expr ; .)
    ELSE            reduce using rule 50 (return_stmt -> RETURN expr ; .)


state 194

    (46) if_stmt -> IF ( expr . ) stmt ELSE stmt
    (47) if_stmt -> IF ( expr . ) stmt
    (78) expr -> expr . % expr
    (79) expr -> expr . / expr
    (80) expr -> expr . * expr
    (81) expr -> expr . - expr
    (82) expr -> expr . + expr
    (83) expr -> expr . GE expr
    (84) expr -> expr . GT expr
    (85) expr -> expr . LE expr
    (86) expr -> expr . LT expr
    (87) expr -> expr . NE expr
    (88) expr -> expr . EQ expr
    (89) expr -> expr . AND expr
    (90) expr -> expr . OR expr
    )               shift and go to state 199
    %               shift and go to state 72
    /               shift and go to state 73
    *               shift and go to state 74
    -               shift and go to state 75
    +               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    NE              shift and go to state 81
    EQ              shift and go to state 82
    AND             shift and go to state 83
    OR              shift and go to state 84


state 195

    (55) new_stmt -> IDENT = NEW IDENT . ( args_list ) ;
    (               shift and go to state 200


state 196

    (44) super_stmt -> SUPER ( args_list ) . ;
    ;               shift and go to state 201


state 197

    (59) print_stmt -> PRINTF ( expr ) . ;
    ;               shift and go to state 202


state 198

    (52) while_stmt -> WHILE ( expr ) . stmt
    (30) stmt -> . var_decl_instance
    (31) stmt -> . super_stmt
    (32) stmt -> . public_stmt
    (33) stmt -> . private_stmt
    (34) stmt -> . this_stmt
    (35) stmt -> . new_stmt
    (36) stmt -> . print_stmt
    (37) stmt -> . continue_stmt
    (38) stmt -> . break_stmt
    (39) stmt -> . while_stmt
    (40) stmt -> . return_stmt
    (41) stmt -> . if_stmt
    (42) stmt -> . compound_stmt
    (43) stmt -> . expr_stmt
    (64) var_decl_instance -> . IDENT IDENT ;
    (44) super_stmt -> . SUPER ( args_list ) ;
    (49) public_stmt -> . PUBLIC : stmt
    (48) private_stmt -> . PRIVATE : stmt
    (60) this_stmt -> . THIS ;
    (55) new_stmt -> . IDENT = NEW IDENT ( args_list ) ;
    (59) print_stmt -> . PRINTF ( expr ) ;
    (54) continue_stmt -> . CONTINUE ;
    (53) break_stmt -> . BREAK ;
    (52) while_stmt -> . WHILE ( expr ) stmt
    (50) return_stmt -> . RETURN expr ;
    (51) return_stmt -> . RETURN ;
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (25) compound_stmt -> . { local_decls stmt_list }
    (45) expr_stmt -> . expr ;
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 152
    SUPER           shift and go to state 153
    PUBLIC          shift and go to state 154
    PRIVATE         shift and go to state 155
    THIS            shift and go to state 156
    PRINTF          shift and go to state 157
    CONTINUE        shift and go to state 159
    BREAK           shift and go to state 160
    WHILE           shift and go to state 161
    RETURN          shift and go to state 162
    IF              shift and go to state 163
    {               shift and go to state 97
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 158
    stmt                           shift and go to state 203
    var_decl_instance              shift and go to state 138
    super_stmt                     shift and go to state 139
    public_stmt                    shift and go to state 140
    private_stmt                   shift and go to state 141
    this_stmt                      shift and go to state 142
    new_stmt                       shift and go to state 143
    print_stmt                     shift and go to state 144
    continue_stmt                  shift and go to state 145
    break_stmt                     shift and go to state 146
    while_stmt                     shift and go to state 147
    return_stmt                    shift and go to state 148
    if_stmt                        shift and go to state 149
    compound_stmt                  shift and go to state 150
    expr_stmt                      shift and go to state 151

state 199

    (46) if_stmt -> IF ( expr ) . stmt ELSE stmt
    (47) if_stmt -> IF ( expr ) . stmt
    (30) stmt -> . var_decl_instance
    (31) stmt -> . super_stmt
    (32) stmt -> . public_stmt
    (33) stmt -> . private_stmt
    (34) stmt -> . this_stmt
    (35) stmt -> . new_stmt
    (36) stmt -> . print_stmt
    (37) stmt -> . continue_stmt
    (38) stmt -> . break_stmt
    (39) stmt -> . while_stmt
    (40) stmt -> . return_stmt
    (41) stmt -> . if_stmt
    (42) stmt -> . compound_stmt
    (43) stmt -> . expr_stmt
    (64) var_decl_instance -> . IDENT IDENT ;
    (44) super_stmt -> . SUPER ( args_list ) ;
    (49) public_stmt -> . PUBLIC : stmt
    (48) private_stmt -> . PRIVATE : stmt
    (60) this_stmt -> . THIS ;
    (55) new_stmt -> . IDENT = NEW IDENT ( args_list ) ;
    (59) print_stmt -> . PRINTF ( expr ) ;
    (54) continue_stmt -> . CONTINUE ;
    (53) break_stmt -> . BREAK ;
    (52) while_stmt -> . WHILE ( expr ) stmt
    (50) return_stmt -> . RETURN expr ;
    (51) return_stmt -> . RETURN ;
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (25) compound_stmt -> . { local_decls stmt_list }
    (45) expr_stmt -> . expr ;
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 152
    SUPER           shift and go to state 153
    PUBLIC          shift and go to state 154
    PRIVATE         shift and go to state 155
    THIS            shift and go to state 156
    PRINTF          shift and go to state 157
    CONTINUE        shift and go to state 159
    BREAK           shift and go to state 160
    WHILE           shift and go to state 161
    RETURN          shift and go to state 162
    IF              shift and go to state 163
    {               shift and go to state 97
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 158
    stmt                           shift and go to state 204
    var_decl_instance              shift and go to state 138
    super_stmt                     shift and go to state 139
    public_stmt                    shift and go to state 140
    private_stmt                   shift and go to state 141
    this_stmt                      shift and go to state 142
    new_stmt                       shift and go to state 143
    print_stmt                     shift and go to state 144
    continue_stmt                  shift and go to state 145
    break_stmt                     shift and go to state 146
    while_stmt                     shift and go to state 147
    return_stmt                    shift and go to state 148
    if_stmt                        shift and go to state 149
    compound_stmt                  shift and go to state 150
    expr_stmt                      shift and go to state 151

state 200

    (55) new_stmt -> IDENT = NEW IDENT ( . args_list ) ;
    (56) args_list -> . args_list , expr
    (57) args_list -> . expr
    (58) args_list -> . empty
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    (103) empty -> .
    IDENT           shift and go to state 41
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55
    )               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)

    args_list                      shift and go to state 205
    expr                           shift and go to state 103
    empty                          shift and go to state 104

state 201

    (44) super_stmt -> SUPER ( args_list ) ; .
    IDENT           reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    SUPER           reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    PUBLIC          reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    PRIVATE         reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    THIS            reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    PRINTF          reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    CONTINUE        reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    BREAK           reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    WHILE           reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    RETURN          reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    IF              reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    {               reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    (               reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    NOT             reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    DECREMENT       reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    INCREMENT       reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    +               reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    !               reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    -               reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    FALSE           reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    TRUE            reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    STRINGLIT       reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    BOOLIT          reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    FLOATLIT        reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    INTLIT          reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    }               reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)
    ELSE            reduce using rule 44 (super_stmt -> SUPER ( args_list ) ; .)


state 202

    (59) print_stmt -> PRINTF ( expr ) ; .
    IDENT           reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    SUPER           reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    PUBLIC          reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    PRIVATE         reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    THIS            reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    PRINTF          reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    CONTINUE        reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    BREAK           reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    WHILE           reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    RETURN          reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    IF              reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    {               reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    (               reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    NOT             reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    DECREMENT       reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    INCREMENT       reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    +               reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    !               reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    -               reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    FALSE           reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    TRUE            reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    STRINGLIT       reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    BOOLIT          reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    FLOATLIT        reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    INTLIT          reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    }               reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)
    ELSE            reduce using rule 59 (print_stmt -> PRINTF ( expr ) ; .)


state 203

    (52) while_stmt -> WHILE ( expr ) stmt .
    IDENT           reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    SUPER           reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    PUBLIC          reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    PRIVATE         reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    THIS            reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    PRINTF          reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    CONTINUE        reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    BREAK           reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    WHILE           reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    RETURN          reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    IF              reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    {               reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    (               reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    NOT             reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    DECREMENT       reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    INCREMENT       reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    +               reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    !               reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    -               reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    FALSE           reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    TRUE            reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    STRINGLIT       reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    BOOLIT          reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    FLOATLIT        reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    INTLIT          reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    }               reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)
    ELSE            reduce using rule 52 (while_stmt -> WHILE ( expr ) stmt .)


state 204

    (46) if_stmt -> IF ( expr ) stmt . ELSE stmt
    (47) if_stmt -> IF ( expr ) stmt .
    ELSE            shift and go to state 206
    IDENT           reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    SUPER           reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    PUBLIC          reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    PRIVATE         reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    THIS            reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    PRINTF          reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    CONTINUE        reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    BREAK           reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    WHILE           reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    RETURN          reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    IF              reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    {               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    (               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    NOT             reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    DECREMENT       reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    INCREMENT       reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    +               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    !               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    -               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    FALSE           reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    TRUE            reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    STRINGLIT       reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    BOOLIT          reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    FLOATLIT        reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    INTLIT          reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    }               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)


state 205

    (55) new_stmt -> IDENT = NEW IDENT ( args_list . ) ;
    (56) args_list -> args_list . , expr
    )               shift and go to state 207
    ,               shift and go to state 130


state 206

    (46) if_stmt -> IF ( expr ) stmt ELSE . stmt
    (30) stmt -> . var_decl_instance
    (31) stmt -> . super_stmt
    (32) stmt -> . public_stmt
    (33) stmt -> . private_stmt
    (34) stmt -> . this_stmt
    (35) stmt -> . new_stmt
    (36) stmt -> . print_stmt
    (37) stmt -> . continue_stmt
    (38) stmt -> . break_stmt
    (39) stmt -> . while_stmt
    (40) stmt -> . return_stmt
    (41) stmt -> . if_stmt
    (42) stmt -> . compound_stmt
    (43) stmt -> . expr_stmt
    (64) var_decl_instance -> . IDENT IDENT ;
    (44) super_stmt -> . SUPER ( args_list ) ;
    (49) public_stmt -> . PUBLIC : stmt
    (48) private_stmt -> . PRIVATE : stmt
    (60) this_stmt -> . THIS ;
    (55) new_stmt -> . IDENT = NEW IDENT ( args_list ) ;
    (59) print_stmt -> . PRINTF ( expr ) ;
    (54) continue_stmt -> . CONTINUE ;
    (53) break_stmt -> . BREAK ;
    (52) while_stmt -> . WHILE ( expr ) stmt
    (50) return_stmt -> . RETURN expr ;
    (51) return_stmt -> . RETURN ;
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (25) compound_stmt -> . { local_decls stmt_list }
    (45) expr_stmt -> . expr ;
    (70) expr -> . IDENT . SIZE
    (71) expr -> . ( expr )
    (72) expr -> . NOT expr
    (73) expr -> . DECREMENT expr
    (74) expr -> . INCREMENT expr
    (75) expr -> . + expr
    (76) expr -> . ! expr
    (77) expr -> . - expr
    (78) expr -> . expr % expr
    (79) expr -> . expr / expr
    (80) expr -> . expr * expr
    (81) expr -> . expr - expr
    (82) expr -> . expr + expr
    (83) expr -> . expr GE expr
    (84) expr -> . expr GT expr
    (85) expr -> . expr LE expr
    (86) expr -> . expr LT expr
    (87) expr -> . expr NE expr
    (88) expr -> . expr EQ expr
    (89) expr -> . expr AND expr
    (90) expr -> . expr OR expr
    (91) expr -> . IDENT . IDENT ( args_list )
    (92) expr -> . IDENT
    (93) expr -> . IDENT ( args_list )
    (94) expr -> . IDENT [ expr ]
    (95) expr -> . IDENT [ expr ] = expr
    (96) expr -> . IDENT = expr
    (97) expr -> . FALSE
    (98) expr -> . TRUE
    (99) expr -> . STRINGLIT
    (100) expr -> . BOOLIT
    (101) expr -> . FLOATLIT
    (102) expr -> . INTLIT
    IDENT           shift and go to state 152
    SUPER           shift and go to state 153
    PUBLIC          shift and go to state 154
    PRIVATE         shift and go to state 155
    THIS            shift and go to state 156
    PRINTF          shift and go to state 157
    CONTINUE        shift and go to state 159
    BREAK           shift and go to state 160
    WHILE           shift and go to state 161
    RETURN          shift and go to state 162
    IF              shift and go to state 163
    {               shift and go to state 97
    (               shift and go to state 43
    NOT             shift and go to state 44
    DECREMENT       shift and go to state 45
    INCREMENT       shift and go to state 46
    +               shift and go to state 47
    !               shift and go to state 48
    -               shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    STRINGLIT       shift and go to state 52
    BOOLIT          shift and go to state 53
    FLOATLIT        shift and go to state 54
    INTLIT          shift and go to state 55

    expr                           shift and go to state 158
    stmt                           shift and go to state 208
    var_decl_instance              shift and go to state 138
    super_stmt                     shift and go to state 139
    public_stmt                    shift and go to state 140
    private_stmt                   shift and go to state 141
    this_stmt                      shift and go to state 142
    new_stmt                       shift and go to state 143
    print_stmt                     shift and go to state 144
    continue_stmt                  shift and go to state 145
    break_stmt                     shift and go to state 146
    while_stmt                     shift and go to state 147
    return_stmt                    shift and go to state 148
    if_stmt                        shift and go to state 149
    compound_stmt                  shift and go to state 150
    expr_stmt                      shift and go to state 151

state 207

    (55) new_stmt -> IDENT = NEW IDENT ( args_list ) . ;
    ;               shift and go to state 209


state 208

    (46) if_stmt -> IF ( expr ) stmt ELSE stmt .
    IDENT           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    SUPER           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    PUBLIC          reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    PRIVATE         reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    THIS            reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    PRINTF          reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    CONTINUE        reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    BREAK           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    WHILE           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    RETURN          reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    IF              reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    {               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    (               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    NOT             reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    DECREMENT       reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    INCREMENT       reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    +               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    !               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    -               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    FALSE           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    TRUE            reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    STRINGLIT       reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    BOOLIT          reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    FLOATLIT        reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    INTLIT          reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    }               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    ELSE            reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)


state 209

    (55) new_stmt -> IDENT = NEW IDENT ( args_list ) ; .
    IDENT           reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    SUPER           reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    PUBLIC          reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    PRIVATE         reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    THIS            reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    PRINTF          reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    CONTINUE        reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    BREAK           reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    WHILE           reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    RETURN          reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    IF              reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    {               reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    (               reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    NOT             reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    DECREMENT       reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    INCREMENT       reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    +               reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    !               reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    -               reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    FALSE           reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    TRUE            reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    STRINGLIT       reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    BOOLIT          reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    FLOATLIT        reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    INTLIT          reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    }               reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
    ELSE            reduce using rule 55 (new_stmt -> IDENT = NEW IDENT ( args_list ) ; .)
